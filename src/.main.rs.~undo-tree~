(undo-tree-save-format-version . 1)
"3b49ac9c6e668c7d99902ce267b88645d2130a28"
[nil nil nil nil (26164 13027 168149 0) 0 nil]
([nil nil ((9 . 30) (apply yas--snippet-revive 1 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 4 nil nil nil nil)) (1 . 9) (#("x" 0 1 (fontified t)) . 1) (undo-tree-id0 . -1) 2 (1 . 2) (1 . 2) (1 . 2) (t 26164 13009 839800 504000)) nil (26164 13027 168145 0) 0 nil])
([nil nil ((#("// XXX: First we need a tuple" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 29 (face font-lock-comment-face fontified t)) . 1) (undo-tree-id5 . -28) (undo-tree-id6 . -29) (undo-tree-id7 . -28) (undo-tree-id8 . -28) (undo-tree-id9 . -28) (undo-tree-id10 . -28) (undo-tree-id11 . -28) (undo-tree-id12 . -28) (undo-tree-id13 . -28) (undo-tree-id14 . -28) (undo-tree-id15 . -28) (undo-tree-id16 . -28) (undo-tree-id17 . -28) (undo-tree-id18 . -28) (undo-tree-id19 . -29) (t 26164 13027 172117 461000)) nil (26164 13028 294117 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id3 . 1) (undo-tree-id4 . -1)) nil (26164 13028 294104 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id1 . 1) (undo-tree-id2 . -1)) nil (26164 13028 294099 0) 0 nil])
([nil nil ((33 . 34) (#(" " 0 1 (fontified t)) . -33) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("=" 0 1 (fontified t)) . -34) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#(" " 0 1 (fontified t)) . -35) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 36 (33 . 36) (27 . 32) (20 . 28) (17 . 20) (13 . 17) (#("    state_machine : " 0 4 (fontified t) 4 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t)) . 13) (undo-tree-id40 . -9) (undo-tree-id41 . -9) (17 . 33) (13 . 17) (13 . 14) (t 26164 13028 298557 813000)) nil (26164 13059 903932 0) 0 nil])
([nil nil ((24 . 25) (#(":" 0 1 (fontified t)) . 24) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (t 26164 13059 909357 269000)) nil (26164 13066 58675 0) 0 nil])
([nil nil ((30 . 33) (#("3" 0 1 (fontified t)) . 30) (#(" " 0 1 (fontified t)) . 30) (#(";" 0 1 (fontified t)) . 30) (27 . 28) (t 26164 13066 64222 793000)) nil (26164 13081 700526 0) 0 nil])
([nil nil ((17 . 21) (t 26164 13081 704822 546000)) nil (26164 13087 342708 0) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . 32) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (t 26164 13087 347012 171000)) nil (26164 13092 974707 0) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . 32) (undo-tree-id52 . -1) (undo-tree-id53 . -1)) nil (26164 13092 974704 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 32) (undo-tree-id50 . -1) (undo-tree-id51 . -1)) nil (26164 13092 974702 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 32) (undo-tree-id48 . -1) (undo-tree-id49 . -1)) nil (26164 13092 974699 0) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . 32) (undo-tree-id46 . -1) (undo-tree-id47 . -1)) nil (26164 13092 974696 0) 0 nil])
([nil nil ((32 . 38)) nil (26164 13092 974682 0) 0 nil])
([nil nil ((37 . 38) (33 . 36) (31 . 33) (28 . 32) (t 26164 13092 979927 674000)) nil (26164 13102 116946 0) 0 nil])
([nil nil ((81 . 82) (79 . 80) (64 . 80) (#("+" 0 1 (fontified t)) . -64) (undo-tree-id56 . -1) 65 (55 . 65) (50 . 55) (t 26164 13102 122597 268000) 36) nil (26164 13123 64191 0) 0 nil])
([nil nil ((#("nit" 0 3 (face font-lock-variable-name-face fontified t)) . 60) (undo-tree-id57 . -2) (undo-tree-id58 . -3) (undo-tree-id59 . -2) (undo-tree-id60 . -3) (undo-tree-id61 . -1) (undo-tree-id62 . -2) (undo-tree-id63 . -1) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (t 26164 13123 69803 434000)) nil (26164 13127 560107 0) 0 nil])
([nil nil ((#("tate " 0 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t)) . 62) (undo-tree-id66 . -4) (undo-tree-id67 . -5) (t 26164 13127 564070 104000)) nil (26164 13129 171307 0) 0 nil])
([nil nil ((62 . 63) (t 26164 13129 175649 695000)) nil (26164 13130 191755 0) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . 59) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (t 26164 13130 196208 808000)) nil (26164 13132 451702 0) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 59) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1)) nil (26164 13132 451698 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . 59) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1)) nil (26164 13132 451691 0) 0 nil])
([nil nil ((59 . 61)) nil (26164 13132 451669 0) 0 nil])
([nil nil ((88 . 92) (#("u8" 0 2 (face font-lock-type-face fontified t)) . 88) (94 . 99) (88 . 93) (85 . 89) (#("=" 0 1 (fontified t)) . -85) (undo-tree-id124 . -1) (#(" " 0 1 (fontified t)) . -86) (undo-tree-id125 . -1) 87 (81 . 87) (79 . 81) (74 . 79) (t 26164 13132 456022 936000) 60) nil (26164 13164 488083 0) 0 nil])
([nil nil ((88 . 92) (#("v" 0 1 (fontified t)) . -88) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("o" 0 1 (fontified t)) . -89) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 90 (88 . 90) (#("char" 0 4 (face font-lock-type-face fontified t)) . 88) (undo-tree-id109 . -4) (undo-tree-id110 . -3) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -3) (undo-tree-id116 . -4) (undo-tree-id117 . -2) (undo-tree-id118 . -3) (undo-tree-id119 . -1) (undo-tree-id120 . -2) (undo-tree-id121 . -1) (undo-tree-id122 . -4) (undo-tree-id123 . -4)) nil (26164 13164 488072 0) 0 nil])
([nil nil ((113 . 114) (105 . 112) (#(";" 0 1 (fontified t)) . -105) (undo-tree-id126 . -1) 106 (100 . 106) (t 26164 13164 492079 171000)) nil (26164 13170 208631 0) 0 nil])
([nil nil ((141 . 142) (133 . 140) (#("l" 0 1 (fontified t)) . -133) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#(" " 0 1 (fontified t)) . -134) (undo-tree-id130 . -1) 135 (128 . 135) (119 . 129) (114 . 119) (t 26164 13170 212927 207000) 91) nil (26164 13183 613009 0) 0 nil])
([nil nil ((128 . 135) (125 . 129) (t 26164 13183 617474 719000)) nil (26164 13189 944766 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 27) (#(" " 0 1 (fontified t)) . 84) (#(" " 0 1 (fontified t)) . 124) (136 . 137) 135 (t 26164 13189 949515 554000)) nil (26164 13190 938522 0) 0 nil])
([nil nil ((82 . 83) (#("I" 0 1 (face font-lock-variable-name-face fontified t)) . 82) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (t 26164 13190 943084 422000)) nil (26164 13197 486503 0) 0 nil])
([nil nil ((121 . 122) (#("O" 0 1 (face font-lock-variable-name-face fontified t)) . 121) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1)) nil (26164 13197 486498 0) 0 nil])
([nil nil ((122 . 123) (t 26164 13197 490731 132000)) nil (26164 13202 21823 0) 0 nil])
([nil nil ((83 . 84) (t 26164 13202 26474 684000)) nil (26164 13203 36696 0) 0 nil])
([nil nil ((58 . 59) (t 26164 13203 40997 743000)) nil (26164 13207 825794 0) 0 nil])
([nil nil ((83 . 84) (t 26164 13206 763026 975000)) nil (26164 13213 562466 0) 0 nil] [nil nil ((#("_s0 = states[0];" 0 1 (face font-lock-variable-name-face fontified t) 1 3 (face font-lock-variable-name-face fontified t) 3 4 (fontified t) 4 12 (fontified t) 12 16 (fontified t)) . 58) (undo-tree-id138 . 15) (undo-tree-id139 . -1) (undo-tree-id140 . -16) (t 26164 13206 763026 975000)) ((58 . 74)) (26164 13207 824899 0) 0 nil])
([nil nil ((124 . 125)) nil (26164 13213 562463 0) 0 nil])
nil
([nil nil ((#("    println!(\"Hello, world!\");" 0 4 (fontified t) 4 12 (face rust-builtin-formatting-macro fontified t) 12 13 (fontified t) 13 28 (face font-lock-string-face fontified t) 28 30 (fontified t)) . 157) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -30) (t 26164 13213 567489 154000)) nil (26164 13226 820989 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 157) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (t 26164 13226 825757 204000)) nil (26164 13227 509066 0) 0 nil])
([nil nil ((223 . 227) (#("_" 0 1 (fontified t)) . -223) (undo-tree-id219 . -1) 224 (223 . 224) (10 . 33) (19 . 20) (apply yas--snippet-revive 191 200 #s(yas--snippet nil nil #s(yas--exit 199 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 199 nil) 6 nil nil nil nil)) (191 . 200) (#("HashMap<$0>" 0 11 (fontified nil)) . 191) (191 . 202) (#("Map" 0 3 (fontified nil)) . 191) (191 . 194) (#("HashMap<â€¦> (use std::collections::HashMap)" 0 42 (fontified nil)) . -191) (191 . 233) (#("Map" 0 3 (face font-lock-type-face fontified t)) . -191) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) 194 (189 . 194) (#("=" 0 1 (fontified t)) . -189) (undo-tree-id223 . -1) 190 (182 . 190) (178 . 182) (#("    let _r : Map<(u8, bool)>" 0 4 (fontified t) 4 7 (face bold fontified t) 7 8 (fontified t) 8 10 (face font-lock-variable-name-face fontified t) 10 13 (fontified t) 13 16 (face font-lock-type-face fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 26 (face font-lock-type-face fontified t) 26 27 (fontified t) 27 28 (fontified t)) . 178) (undo-tree-id224 . -26) (undo-tree-id225 . -18) (undo-tree-id226 . -17) (undo-tree-id227 . -18) (undo-tree-id228 . -27) (undo-tree-id229 . -27) (196 . 204) (195 . 197) (#("u" 0 1 (fontified t)) . -195) (undo-tree-id230 . -1) (#("8" 0 1 (face font-lock-type-face fontified t)) . -196) (undo-tree-id231 . -1) 197 (195 . 197) (1 . 22) (apply yas--snippet-revive 170 175 #s(yas--snippet nil nil #s(yas--exit 174 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 174 nil) 5 nil nil nil nil)) (170 . 175) (#("Map<$0>" 0 7 (fontified nil)) . 170) (170 . 177) (#("map" 0 3 (fontified nil)) . 170) (170 . 173) (#("Map<â€¦> (use std::iter::Map)" 0 27 (fontified nil)) . -170) (170 . 197) (#("map" 0 3 (fontified t)) . -170) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) 173 (168 . 173) (#("=" 0 1 (fontified t)) . -168) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -169) (undo-tree-id236 . -1) 170 (165 . 170) (#("relations " 0 9 (face font-lock-variable-name-face fontified t) 9 10 (fontified t)) . -165) (undo-tree-id237 . -10) 175 (161 . 175) (157 . 161) (157 . 158) (t 26164 13227 513766 923000)) nil (26164 13369 349937 0) 0 nil])
([nil nil ((#("u8" 0 2 (face font-lock-type-face fontified t)) . 223) (undo-tree-id217 . -1) (undo-tree-id218 . -2)) nil (26164 13369 349911 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 223) (undo-tree-id215 . -1) (undo-tree-id216 . -1)) nil (26164 13369 349908 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 223) (undo-tree-id213 . -1) (undo-tree-id214 . -1)) nil (26164 13369 349903 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -238) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#(" " 0 1 (fontified t)) . -239) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("V" 0 1 (face font-lock-type-face fontified t)) . -240) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -241) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -242) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 243 (240 . 243) (#("[" 0 1 (fontified nil)) . -240) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("]" 0 1 (fontified t)) . 241) (240 . 242) (#("b" 0 1 (fontified t)) . -240) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("o" 0 1 (fontified t)) . -241) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("o" 0 1 (fontified t)) . -242) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -243) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 244 (236 . 244) (233 . 237) (228 . 232) (#("v" 0 1 (fontified t)) . -228) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("b" 0 1 (fontified t)) . -229) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("o" 0 1 (fontified t)) . -230) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("o" 0 1 (fontified t)) . -231) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 232 (229 . 232) (#("o" 0 1 (fontified t)) . -229) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("o" 0 1 (fontified t)) . -230) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 231 (224 . 231) (223 . 225) (#("u" 0 1 (fontified t)) . -223) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("8" 0 1 (face font-lock-type-face fontified t)) . -224) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("," 0 1 (fontified t)) . -225) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -226) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 227 (223 . 227)) nil (26164 13369 349896 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . 235) (undo-tree-id146 . -1) (#(")" 0 1 (fontified t)) . -238) (undo-tree-id147 . 1) (undo-tree-id148 . 1) (undo-tree-id149 . -1) 235) nil (26164 13369 349833 0) 0 nil])
([nil nil ((#("bool" 0 4 (face font-lock-type-face fontified t)) . 228) (undo-tree-id239 . -3) (t 26164 13369 355135 921000)) nil (26164 13376 607327 0) 0 nil])
([nil nil ((#("8" 0 1 (face font-lock-type-face fontified t)) . 225)) nil (26164 13376 607325 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 225)) nil (26164 13376 607325 0) 0 nil])
([nil nil ((225 . 226)) nil (26164 13376 607324 0) 0 nil])
([nil nil ((225 . 226)) nil (26164 13376 607323 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 226)) nil (26164 13376 607322 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 226)) nil (26164 13376 607321 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . 223) (#(")" 0 1 (fontified t)) . -226) (undo-tree-id238 . -1) 223) nil (26164 13376 607318 0) 0 nil])
([nil nil ((247 . 248) (apply yas--snippet-revive 242 247 #s(yas--snippet nil nil #s(yas--exit 247 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 247 nil) 7 nil nil nil nil)) (242 . 247) (#("new()$0" 0 7 (fontified nil)) . 242) (242 . 249) (#("new" 0 3 (fontified nil)) . 242) (242 . 245) (#("new()" 0 5 (fontified nil)) . -242) (242 . 247) (#("new" 0 3 (fontified t)) . -242) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) 245 (240 . 245) (233 . 240) (#("Hash" 0 4 (fontified nil)) . 233) (233 . 237) (#("HashMap" 0 7 (fontified nil)) . -233) (233 . 240) (#("Hash" 0 4 (face font-lock-type-face fontified t)) . -233) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) 237 (234 . 237) (230 . 234) (t 26164 13376 612739 761000)) nil (26164 13383 860947 0) 0 nil])
([nil nil ((#("iter" 0 4 (face font-lock-constant-face fontified t)) . 33) (undo-tree-id279 . -3) (undo-tree-id280 . -4) (t 26164 13383 868281 613000)) nil (26164 13389 920226 0) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 33) (undo-tree-id277 . -1) (undo-tree-id278 . -2)) nil (26164 13389 920223 0) 0 nil])
([nil nil ((#("Map" 0 3 (face font-lock-type-face fontified t)) . 33) (undo-tree-id275 . -2) (undo-tree-id276 . -3)) nil (26164 13389 920221 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 31) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1)) nil (26164 13389 920218 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 31) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1)) nil (26164 13389 920211 0) 0 nil])
([nil nil ((#("{" 0 1 (fontified nil)) . 10) (#("}" 0 1 (fontified t)) . -31) (undo-tree-id281 . -1) 10 (t 26164 13389 926132 985000)) nil (26164 13391 662644 0) 0 nil])
([nil nil ((210 . 211) (212 . 213) (t 26164 13391 669392 111000)) nil (26164 13408 805311 0) 0 nil])
([nil nil ((213 . 219)) nil (26164 13408 805307 0) 0 nil])
([nil nil ((222 . 223) (224 . 225) (t 26164 13408 813597 992000)) nil (26164 13413 166617 0) 0 nil])
([nil nil ((225 . 231)) nil (26164 13413 166613 0) 0 nil])
([nil nil ((227 . 229) (#("bool" 0 4 (face font-lock-type-face fontified t)) . 227) (undo-tree-id282 . -3) (t 26164 13413 173508 631000)) nil (26164 13422 749153 0) 0 nil])
([nil nil ((215 . 217) (#("bool" 0 4 (face font-lock-type-face fontified t)) . 215) (undo-tree-id283 . -3) (t 26164 13422 755943 178000)) nil (26164 13425 705510 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 262 263 nil nil nil nil #s(yas--field 2 265 266 nil nil nil nil #s(yas--exit 267 nil))) #s(yas--field 2 265 266 nil nil nil nil #s(yas--exit 267 nil))) #s(yas--exit 267 nil) 8 nil #s(yas--field 1 262 263 nil nil nil nil #s(yas--field 2 265 266 nil nil nil nil #s(yas--exit 267 nil))) nil nil)) (255 . 267) (#("insert(${1:k}, ${2:v})$0" 0 24 (fontified nil)) . 255) (255 . 279) (#("in" 0 2 (fontified nil)) . 255) (255 . 257) (#("insert(â€¦)" 0 9 (fontified nil)) . -255) (255 . 264) (#("in" 0 2 (face bold fontified t)) . -255) (undo-tree-id293 . -2) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) 257 (252 . 257) (247 . 252) (t 26164 13425 712421 916000) 230) nil (26164 13502 887147 0) 0 nil])
([nil nil ((apply yas--snippet-revive 255 267 #s(yas--snippet nil (#s(yas--field 1 262 263 nil nil nil nil #s(yas--field 2 265 266 nil nil nil nil #s(yas--exit 267 nil))) #s(yas--field 2 265 266 nil nil nil nil #s(yas--exit 267 nil))) #s(yas--exit 267 nil) 8 nil #s(yas--field 1 262 263 nil nil nil nil #s(yas--field 2 265 266 nil nil nil nil #s(yas--exit 267 nil))) nil nil))) nil (26164 13502 887134 0) 0 nil])
([nil nil ((33 . 34) 43) nil (26164 13502 887133 0) 0 nil])
([nil nil ((33 . 34)) nil (26164 13502 887132 0) 0 nil])
([nil nil ((33 . 46)) nil (26164 13502 887131 0) 0 nil])
([nil nil ((46 . 51)) nil (26164 13502 887131 0) 0 nil])
([nil nil ((51 . 53)) nil (26164 13502 887130 0) 0 nil])
([nil nil ((53 . 54)) nil (26164 13502 887129 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -45) (undo-tree-id284 . -1) (#("
" 0 1 (fontified t)) . -46) (undo-tree-id285 . -1) (#(" " 0 1 (fontified t)) . -47) (undo-tree-id286 . -1) (#(" " 0 1 (fontified t)) . -48) (undo-tree-id287 . -1) (#(" " 0 1 (fontified t)) . -49) (undo-tree-id288 . -1) (#(" " 0 1 (fontified t)) . -50) (undo-tree-id289 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -51) (undo-tree-id290 . -1) (#("0" 0 1 (face font-lock-type-face fontified t)) . -52) (undo-tree-id291 . -1) (#("," 0 1 (fontified t)) . -53) (undo-tree-id292 . -1) 54) nil (26164 13502 887127 0) 0 nil])
([nil nil ((45 . 50)) nil (26164 13502 887110 0) 0 nil])
([nil nil ((50 . 54) (#("    " 0 4 (fontified nil)) . 50) (50 . 54) (49 . 51)) nil (26164 13502 887103 0) 0 nil])
([nil nil ((70 . 72) (65 . 70) (62 . 65) (57 . 62) (54 . 57) (t 26164 13502 894352 629000)) nil (26164 13507 177646 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 46) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (t 26164 13507 186342 718000)) nil (26164 13520 646072 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 46) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1)) nil (26164 13520 646067 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 45) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (70 . 71) (#(" " 0 1 (fontified t)) . 240) 46 (t 26164 13520 653527 749000)) nil (26164 13521 632869 0) 0 nil])
([nil nil ((#("states[0];" 0 6 (fontified t) 6 10 (fontified t)) . 137) (undo-tree-id334 . -9) (undo-tree-id335 . -2) (undo-tree-id336 . -1) (undo-tree-id337 . -2) (undo-tree-id338 . -1) (undo-tree-id339 . -10) (undo-tree-id340 . -10) (t 26164 13521 640122 758000)) nil (26164 13554 973895 0) 0 nil])
([nil nil ((137 . 139)) nil (26164 13554 973879 0) 0 nil])
([nil nil ((139 . 140) (t 26164 13554 989016 95000)) nil (26164 13556 68578 0) 0 nil])
([nil nil ((137 . 145) (t 26164 13556 75682 857000)) nil (26164 13561 470912 0) 0 nil])
([nil nil ((#("    let states: [u8; 3] = [0, 1, 2];" 0 4 (fontified t) 4 7 (face bold fontified t) 7 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t) 16 17 (fontified t) 17 19 (face font-lock-type-face fontified t) 19 22 (fontified t) 22 24 (fontified t) 24 26 (fontified t) 26 34 (fontified t) 34 36 (fontified t)) . 86) (undo-tree-id342 . -21) (undo-tree-id343 . -20) (undo-tree-id344 . -21) (undo-tree-id345 . -19) (undo-tree-id346 . -20) (undo-tree-id347 . -18) (undo-tree-id348 . -19) (undo-tree-id349 . -17) (undo-tree-id350 . -18) (undo-tree-id351 . -16) (undo-tree-id352 . -17) (undo-tree-id353 . -16) (undo-tree-id354 . -16) (undo-tree-id355 . -16) (undo-tree-id356 . -16) (undo-tree-id357 . -16) (undo-tree-id358 . -36) (t 26164 13561 478645 863000)) nil (26164 13565 627217 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 86) (undo-tree-id341 . -1)) nil (26164 13565 627199 0) 0 nil])
([nil nil ((72 . 73) (t 26164 13565 634029 245000) 71) nil (26164 13575 762620 0) 0 nil])
([nil nil ((73 . 74)) nil (26164 13575 762618 0) 0 nil])
([nil nil ((74 . 88)) nil (26164 13575 762617 0) 0 nil])
([nil nil ((88 . 92) (#("    " 0 4 (fontified nil)) . 88) (88 . 92) (87 . 89)) nil (26164 13575 762613 0) 0 nil])
([nil nil ((99 . 101) (94 . 99) (92 . 94) (t 26164 13575 769118 77000)) nil (26164 13579 163317 0) 0 nil])
([nil nil ((103 . 104) (t 26164 13579 171914 667000) 102) nil (26164 13588 28658 0) 0 nil])
([nil nil ((104 . 105)) nil (26164 13588 28657 0) 0 nil])
([nil nil ((105 . 118)) nil (26164 13588 28656 0) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . -112) (undo-tree-id359 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -113) (undo-tree-id360 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -114) (undo-tree-id361 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -115) (undo-tree-id362 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -116) (undo-tree-id363 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -117) (undo-tree-id364 . -1) 118) nil (26164 13588 28654 0) 0 nil])
([nil nil ((112 . 119)) nil (26164 13588 28641 0) 0 nil])
([nil nil ((119 . 123) (#("    " 0 4 (fontified nil)) . 119) (119 . 123) (118 . 120)) nil (26164 13588 28638 0) 0 nil])
([nil nil ((131 . 134) (126 . 131) (123 . 126) (t 26164 13588 36118 878000)) nil (26164 13592 237687 0) 0 nil])
([nil nil ((117 . 118) 133 (t 26164 13592 244792 63000)) nil (26164 13593 353982 0) 0 nil])
([nil nil ((#("    let _is: [bool; 2] = [false, false];" 0 4 (fontified t) 4 7 (face bold fontified t) 7 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 11 (face font-lock-variable-name-face fontified t) 11 13 (fontified t) 13 14 (fontified t) 14 18 (face font-lock-type-face fontified t) 18 21 (fontified t) 21 25 (fontified t) 25 26 (fontified t) 26 31 (face bold fontified t) 31 33 (fontified t) 33 38 (face bold fontified t) 38 40 (fontified t)) . 177) (undo-tree-id371 . -6) (undo-tree-id372 . -6) (undo-tree-id373 . -6) (undo-tree-id374 . -6) (undo-tree-id375 . -40) (t 26164 13593 361274 506000)) nil (26164 13611 75217 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 177) (undo-tree-id370 . -1)) nil (26164 13611 75211 0) 0 nil])
([nil nil ((#("    let _os: [bool; 2] = [false, false];" 0 4 (fontified t) 4 7 (face bold fontified t) 7 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 11 (face font-lock-variable-name-face fontified t) 11 13 (fontified t) 13 14 (fontified t) 14 18 (face font-lock-type-face fontified t) 18 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 25 (fontified t) 25 26 (fontified t) 26 31 (face bold fontified t) 31 33 (fontified t) 33 38 (face bold fontified t) 38 40 (fontified t)) . 177) (undo-tree-id365 . -8) (undo-tree-id366 . -8) (undo-tree-id367 . -8) (undo-tree-id368 . -8) (undo-tree-id369 . -40)) nil (26164 13611 75207 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 177) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (t 26164 13611 82727 122000)) nil (26164 13611 793529 0) 0 nil])
([nil nil ((198 . 204) (#("u8" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t)) . 198) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (t 26164 13611 801001 83000)) nil (26164 13615 833142 0) 0 nil])
([nil nil ((206 . 211) (#("u8" 0 2 (face font-lock-type-face fontified t)) . 206) (undo-tree-id391 . -1) (t 26164 13615 840465 20000)) nil (26164 13617 755788 0) 0 nil])
([nil nil ((207 . 212) (#("puts" 0 4 (face font-lock-type-face fontified t)) . 207) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (t 26164 13617 762722 600000)) nil (26164 13620 152639 0) 0 nil])
([nil nil ((224 . 231) (#("u8" 0 2 (face font-lock-type-face fontified t)) . -224) (undo-tree-id395 . -2) (undo-tree-id396 . -2) 226 (216 . 222) (#("u8" 0 2 (face font-lock-type-face fontified t)) . 216) (undo-tree-id397 . 2) (undo-tree-id398 . -1) (undo-tree-id399 . -2) (t 26164 13620 160503 417000)) nil (26164 13624 548661 0) 0 nil])
([nil nil ((#("    _r.insert(k, v)" 0 7 (fontified t) 7 19 (fontified t)) . 252) (undo-tree-id470 . -14) (undo-tree-id471 . -19) (undo-tree-id472 . -14) (undo-tree-id473 . -13) (undo-tree-id474 . -14) (undo-tree-id475 . -18) (undo-tree-id476 . -18) (undo-tree-id477 . -19) (t 26164 13624 556627 239000)) nil (26164 13637 381390 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -251) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) 252 (#("    _r.ins" 0 7 (fontified t) 7 10 (fontified t)) . 252) (undo-tree-id446 . -10) (undo-tree-id447 . -7) (undo-tree-id448 . -6) (undo-tree-id449 . -7) (undo-tree-id450 . -8) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (undo-tree-id453 . -8) (undo-tree-id454 . -9) (undo-tree-id455 . -9) (undo-tree-id456 . -9) (undo-tree-id457 . -9) (undo-tree-id458 . -9) (undo-tree-id459 . -9) (undo-tree-id460 . -9) (undo-tree-id461 . -10) (undo-tree-id462 . -10) (undo-tree-id463 . -10) (undo-tree-id464 . -10) (undo-tree-id465 . -10) (undo-tree-id466 . -10) (undo-tree-id467 . -10) (undo-tree-id468 . -10) (undo-tree-id469 . -10) (256 . 262) (252 . 256)) nil (26164 13637 381377 0) 0 nil])
([nil nil ((185 . 189) (t 26164 13637 389049 152000)) nil (26164 13651 765618 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 256) (undo-tree-id478 . 1) (undo-tree-id479 . -1) (#("    _r.i" 0 7 (fontified t) 7 8 (fontified t)) . 256) (undo-tree-id480 . -8) (undo-tree-id481 . -8) (undo-tree-id482 . -8) (undo-tree-id483 . -8) (undo-tree-id484 . -8) (undo-tree-id485 . -8) (undo-tree-id486 . -8) (undo-tree-id487 . -8) (undo-tree-id488 . -8) (undo-tree-id489 . -8) (undo-tree-id490 . -8) (undo-tree-id491 . -8) (undo-tree-id492 . -8) (undo-tree-id493 . -8) (undo-tree-id494 . -8) (undo-tree-id495 . -8) (undo-tree-id496 . -8) (undo-tree-id497 . -8) (undo-tree-id498 . -8) (undo-tree-id499 . -8) (undo-tree-id500 . -8) (undo-tree-id501 . -8) (undo-tree-id502 . -8) (undo-tree-id503 . -8) (undo-tree-id504 . -8) (undo-tree-id505 . -8) (undo-tree-id506 . -8) (undo-tree-id507 . -8) (undo-tree-id508 . -8) (undo-tree-id509 . -8) (undo-tree-id510 . -8) (undo-tree-id511 . -8) (undo-tree-id512 . -8) (undo-tree-id513 . -8) (undo-tree-id514 . -8) (undo-tree-id515 . -8) (undo-tree-id516 . -8) (undo-tree-id517 . -8) (undo-tree-id518 . -8) (undo-tree-id519 . -8) (undo-tree-id520 . -8) (undo-tree-id521 . -8) (undo-tree-id522 . -8) (undo-tree-id523 . -8) (undo-tree-id524 . -8) (undo-tree-id525 . -8) (undo-tree-id526 . -8) (undo-tree-id527 . -8) (undo-tree-id528 . -8) (undo-tree-id529 . -8) (undo-tree-id530 . -8) (undo-tree-id531 . -8) (#("n" 0 1 (face bold fontified t)) . -264) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#("s" 0 1 (fontified t)) . -265) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) 266 (260 . 266) (255 . 260) (t 26164 13651 773337 977000) 188) nil (26164 13663 666468 0) 0 nil])
([nil nil ((260 . 271) (255 . 260) (t 26164 13663 674574 718000) 201) nil (26164 13715 976657 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 33) (undo-tree-id538 . 1) (undo-tree-id539 . -1) (#("#der" 0 4 (fontified t)) . 33) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -3) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (33 . 37) (33 . 34) 44 (t 26164 13715 984382 984000)) nil (26164 13746 247693 0) 0 nil])
([nil nil ((#("    let mut _r: HashMap<(States, Inputs), (States, Outputs)> = HashMap::new();" 0 4 (fontified t) 4 7 (face bold fontified t) 7 8 (fontified t) 8 11 (face bold fontified t) 11 12 (fontified t) 12 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t) 16 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 31 (face font-lock-type-face fontified t) 31 33 (fontified t) 33 39 (face font-lock-type-face fontified t) 39 40 (fontified t) 40 42 (fontified t) 42 43 (fontified t) 43 49 (face font-lock-type-face fontified t) 49 51 (fontified t) 51 58 (face font-lock-type-face fontified t) 58 59 (fontified t) 59 63 (fontified t) 63 70 (face font-lock-type-face fontified t) 70 72 (fontified t) 72 78 (fontified t)) . 177) (undo-tree-id557 . -42) (undo-tree-id558 . -42) (undo-tree-id559 . 29) (undo-tree-id560 . -42) (undo-tree-id561 . -42) (undo-tree-id562 . -43) (undo-tree-id563 . -43) (undo-tree-id564 . -24) (undo-tree-id565 . -24) (undo-tree-id566 . -24) (undo-tree-id567 . -24) (undo-tree-id568 . -24) (undo-tree-id569 . -24) (undo-tree-id570 . -24) (undo-tree-id571 . -25) (undo-tree-id572 . -25) (undo-tree-id573 . -25) (undo-tree-id574 . -60) (undo-tree-id575 . -43) (undo-tree-id576 . -32) (undo-tree-id577 . -25) (undo-tree-id578 . -32) (undo-tree-id579 . -61) (undo-tree-id580 . -51) (undo-tree-id581 . -78) (undo-tree-id582 . -78) (undo-tree-id583 . -78) (undo-tree-id584 . -78) (undo-tree-id585 . -78) (undo-tree-id586 . -24) (undo-tree-id587 . -24) (undo-tree-id588 . -24) (undo-tree-id589 . -24) (undo-tree-id590 . -78) (t 26164 13746 255481 353000)) nil (26164 13754 321337 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 177) (undo-tree-id555 . 1) (undo-tree-id556 . -1)) nil (26164 13754 321308 0) 0 nil])
([nil nil ((#("    _r.insert()" 0 7 (fontified t) 7 13 (fontified t) 13 15 (fontified t)) . 177) (undo-tree-id551 . 15) (undo-tree-id552 . -11) (undo-tree-id553 . -11) (undo-tree-id554 . -15)) nil (26164 13754 321305 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 177) (undo-tree-id549 . 1) (undo-tree-id550 . -1)) nil (26164 13754 321298 0) 0 nil])
([nil nil ((139 . 140) (t 26164 13754 328988 872000)) nil (26164 13781 564647 0) 0 nil])
([nil nil ((139 . 140)) nil (26164 13781 564646 0) 0 nil])
([nil nil ((139 . 141)) nil (26164 13781 564645 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 142 151 nil nil nil t #s(yas--field 2 152 172 nil nil nil t #s(yas--exit 180 nil))) #s(yas--field 2 152 172 nil nil nil t #s(yas--exit 180 nil))) #s(yas--exit 180 nil) 9 nil #s(yas--field 2 152 172 nil nil nil t #s(yas--exit 180 nil)) nil nil)) (139 . 157) (#("fn" 0 2 (face bold fontified t)) . 139) (undo-tree-id599 . -2) 141) nil (26164 13781 564644 0) 0 nil])
([nil nil ((143 . 150) (#("name" 0 4 (face font-lock-function-name-face fontified nil)) . 143) (142 . 143)) nil (26164 13781 564641 0) 0 nil])
([nil nil ((142 . 143)) nil (26164 13781 564640 0) 0 nil])
([nil nil ((152 . 153)) nil (26164 13781 564639 0) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -152) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) 153) nil (26164 13781 564638 0) 0 nil])
([nil nil ((152 . 167)) nil (26164 13781 564634 0) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -165) (undo-tree-id594 . -1) (#(" " 0 1 (fontified t)) . -166) (undo-tree-id595 . -1) 167) nil (26164 13781 564633 0) 0 nil])
([nil nil ((165 . 172)) nil (26164 13781 564630 0) 0 nil])
([nil nil ((166 . 172) (#("Inputs" 0 6 (fontified nil)) . 166) (166 . 172) (#("Inputs" 0 6 (face font-lock-type-face fontified t)) . -166) (undo-tree-id591 . -6) (undo-tree-id592 . -6) (undo-tree-id593 . -6) 172) nil (26164 13781 564628 0) 0 nil])
([nil nil ((apply yas--snippet-revive 139 182 #s(yas--snippet nil (#s(yas--field 1 142 151 nil nil nil t #s(yas--field 2 152 172 nil nil nil t #s(yas--exit 180 nil))) #s(yas--field 2 152 172 nil nil nil t #s(yas--exit 180 nil))) #s(yas--exit 180 nil) 9 nil #s(yas--field 2 152 172 nil nil nil t #s(yas--exit 180 nil)) nil nil))) nil (26164 13781 564614 0) 0 nil])
([nil nil ((180 . 183)) nil (26164 13781 564613 0) 0 nil])
([nil nil ((187 . 191) (183 . 188)) nil (26164 13781 564612 0) 0 nil])
([nil nil ((192 . 194)) nil (26164 13781 564611 0) 0 nil])
([nil nil ((194 . 195) (195 . 199) (#("	" 0 1 (fontified nil)) . 194) (194 . 195) (193 . 195)) nil (26164 13781 564607 0) 0 nil])
([nil nil ((196 . 208) (195 . 197) (t 26164 13781 572641 802000)) nil (26164 13790 961063 0) 0 nil])
([nil nil ((208 . 217)) nil (26164 13790 961061 0) 0 nil])
([nil nil ((218 . 221)) nil (26164 13790 961057 0) 0 nil])
([nil nil ((273 . 279) (apply yas--snippet-revive 263 272 #s(yas--snippet nil nil #s(yas--exit 272 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 272 nil) 10 nil nil nil nil)) (263 . 272) (#("Inputs::A$0" 0 11 (fontified nil)) . 263) (263 . 274) (#("Inputs" 0 6 (fontified nil)) . 263) (263 . 269) (#("Inputs::A" 0 9 (fontified nil)) . -263) (263 . 272) (#("Inputs" 0 6 (face font-lock-type-face fontified t)) . -263) (undo-tree-id600 . -6) (undo-tree-id601 . -6) (undo-tree-id602 . -6) 269 (264 . 269) (#("O" 0 1 (face font-lock-type-face fontified t)) . -264) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -265) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) 266 (258 . 266) (#("S" 0 1 (face font-lock-type-face fontified t)) . -258) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) 259 (258 . 259) (257 . 258) (251 . 257) (#("State" 0 5 (fontified nil)) . 251) (251 . 256) (#("States" 0 6 (fontified nil)) . -251) (251 . 257) (#("State" 0 5 (face font-lock-type-face fontified t)) . -251) (undo-tree-id612 . -5) (undo-tree-id613 . -5) (undo-tree-id614 . -5) 256 (252 . 256) (#("a" 0 1 (face font-lock-type-face fontified t)) . -252) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) 253 (251 . 253) (250 . 252) (248 . 250) (247 . 248) (237 . 246) (#("i" 0 1 (face font-lock-type-face fontified t)) . -237) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) 238 (236 . 238) (#("u" 0 1 (face font-lock-type-face fontified t)) . -236) (undo-tree-id621 . -1) (undo-tree-id622 . -1) 237 (235 . 237) (223 . 235) (221 . 224) (t 26164 13790 969027 873000)) nil (26164 13830 54170 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 300 . 301) (nil fontified nil 278 . 301) (278 . 301) (t 26164 13830 62438 859000)) nil (26164 13837 101658 0) 0 nil])
([nil nil ((302 . 304) (t 26164 13837 110056 724000)) nil (26164 13839 331309 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 303) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1)) nil (26164 13839 331305 0) 0 nil])
([nil nil ((179 . 193) (178 . 179) (174 . 179) (t 26164 13839 339430 165000)) nil (26164 13850 836750 0) 0 nil])
([nil nil ((194 . 195) (212 . 213) (214 . 222) (#("	" 0 1 (fontified t)) . 214) (undo-tree-id630 . -1) (269 . 277) (#("	" 0 1 (fontified t)) . 269) 260 (t 26164 13850 844416 834000)) nil (26164 13854 413865 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 347 . 348) (#("
" 0 1 (fontified nil)) . -463) (339 . 464) 288 (t 26164 13854 421884 734000)) nil (26164 13864 859143 0) 0 nil])
([nil nil ((358 . 359) (#("1" 0 1 (face font-lock-type-face fontified t)) . 358) (undo-tree-id631 . -1) (t 26164 13864 874839 721000)) nil (26164 13869 321131 0) 0 nil])
([nil nil ((#("use std::collections::HashMap;" 0 3 (face bold fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 29 (face font-lock-type-face fontified t) 29 30 (fontified t)) . 1) (undo-tree-id634 . -29) (undo-tree-id635 . -30) (t 26164 13869 329250 577000)) nil (26164 13880 119006 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id633 . -1)) nil (26164 13880 119002 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id632 . -1)) nil (26164 13880 118998 0) 0 nil])
([nil nil ((213 . 214) (#("A" 0 1 (face font-lock-type-face fontified t)) . 213) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (t 26164 13880 127238 492000)) nil (26164 13888 20090 0) 0 nil])
([nil nil ((242 . 243) (#("1" 0 1 (face font-lock-type-face fontified t)) . 242) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (t 26164 13888 27089 489000)) nil (26164 13892 136474 0) 0 nil])
([nil nil ((291 . 292) (#("1" 0 1 (face font-lock-type-face fontified t)) . 291) (undo-tree-id642 . -1) (t 26164 13892 144633 844000)) nil (26164 13900 293448 0) 0 nil])
([nil nil ((304 . 305) (#("1" 0 1 (face font-lock-type-face fontified t rear-nonsticky t)) . 304) (undo-tree-id643 . -1) (t 26164 13900 302927 466000)) nil (26164 13903 307679 0) 0 nil])
([nil nil ((353 . 354) (#("1" 0 1 (face font-lock-type-face fontified t)) . 353) (undo-tree-id644 . -1) (t 26164 13903 317019 997000)) nil (26164 13912 192753 0) 0 nil])
([nil nil ((#("        (States::S1, Inputs::A) => (States::S1, Outputs::O1)," 0 8 (fontified t) 8 9 (fontified t) 9 15 (face font-lock-type-face fontified t) 15 17 (fontified t) 17 19 (face font-lock-type-face fontified t) 19 21 (fontified t) 21 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 30 (face font-lock-type-face fontified t) 30 32 (fontified t) 32 33 (prettify-symbols-end 404 prettify-symbols-start 402 composition (3 2 [8658]) fontified t) 33 34 (prettify-symbols-end 404 prettify-symbols-start 402 composition (3 2 [8658]) fontified t syntax-table (1)) 34 35 (fontified t) 35 36 (fontified t) 36 42 (face font-lock-type-face fontified t) 42 44 (fontified t) 44 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 55 (face font-lock-type-face fontified t) 55 57 (fontified t) 57 58 (face font-lock-type-face fontified t) 58 59 (face font-lock-type-face fontified t rear-nonsticky t) 59 61 (fontified t)) . 370) (undo-tree-id646 . -58) (undo-tree-id647 . -8) (undo-tree-id648 . -58) (undo-tree-id649 . -9) (undo-tree-id650 . -8) (undo-tree-id651 . -15) (undo-tree-id652 . -9) (undo-tree-id653 . -17) (undo-tree-id654 . -15) (undo-tree-id655 . -19) (undo-tree-id656 . -17) (undo-tree-id657 . -18) (undo-tree-id658 . -19) (undo-tree-id659 . -18) (undo-tree-id660 . -18) (undo-tree-id661 . -18) (undo-tree-id662 . -18) (undo-tree-id663 . -18) (undo-tree-id664 . -61) (t 26164 13912 201716 382000)) nil (26164 13923 555889 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 370) (undo-tree-id645 . -1)) nil (26164 13923 555870 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -555) (369 . 556) 316 (t 26164 13923 564041 38000)) nil (26164 13931 875961 0) 0 nil])
([nil nil ((388 . 389) (#("2" 0 1 (face font-lock-type-face fontified t)) . 388) (undo-tree-id665 . -1) (t 26164 13931 884588 350000)) nil (26164 13939 796976 0) 0 nil])
([nil nil ((#("Inputs" 0 6 (face font-lock-type-face fontified t)) . 391) (undo-tree-id672 . -5) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -6) (t 26164 13939 805426 351000)) nil (26164 13942 719784 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 391) (undo-tree-id670 . -1) (undo-tree-id671 . -1)) nil (26164 13942 719779 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 391) (undo-tree-id668 . -1) (undo-tree-id669 . -1)) nil (26164 13942 719777 0) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . 391) (undo-tree-id666 . -1) (undo-tree-id667 . -1)) nil (26164 13942 719773 0) 0 nil])
([nil nil ((391 . 392)) nil (26164 13942 719758 0) 0 nil])
([nil nil ((#("Outputs" 0 7 (face font-lock-type-face fontified t)) . 410) (undo-tree-id684 . -6) (undo-tree-id685 . -1) (undo-tree-id686 . -2) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -2) (undo-tree-id690 . -1) (undo-tree-id691 . -7) (t 26164 13942 728303 762000)) nil (26164 13948 238086 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 410) (undo-tree-id682 . -1) (undo-tree-id683 . -1)) nil (26164 13948 238078 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 410) (undo-tree-id680 . -1) (undo-tree-id681 . -1)) nil (26164 13948 238075 0) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . 410) (undo-tree-id678 . -1) (undo-tree-id679 . -1)) nil (26164 13948 238073 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t rear-nonsticky t)) . 410) (undo-tree-id676 . -1) (undo-tree-id677 . -1)) nil (26164 13948 238069 0) 0 nil])
([nil nil ((410 . 411)) nil (26164 13948 238059 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 410) (t 26164 13948 247565 961000)) nil (26164 13968 18015 0) 0 nil])
([nil nil ((161 . 168) (apply yas--snippet-revive 154 162 #s(yas--snippet nil nil #s(yas--exit 161 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 161 nil) 11 nil nil nil nil)) (154 . 162) (#("Option<$0>" 0 10 (fontified nil)) . 154) (154 . 164) (#("OptionOutputs" 0 6 (fontified nil) 6 13 (face font-lock-type-face fontified nil)) . 154) (undo-tree-id692 . 7) (154 . 160) (#("Option<â€¦>" 0 9 (fontified nil)) . -154) (154 . 163) (#("Option" 0 6 (face font-lock-type-face fontified t)) . -154) (undo-tree-id693 . -6) (undo-tree-id694 . -6) (undo-tree-id695 . -6) 160 (154 . 160)) nil (26164 13968 18011 0) 0 nil])
([nil nil ((418 . 422) (t 26164 13968 27096 320000)) nil (26164 13971 302493 0) 0 nil])
([nil nil ((256 . 257) (#(")" 0 1 (face font-lock-type-face fontified nil)) . -256) (256 . 257) (#(")" 0 1 (fontified t)) . 245) (undo-tree-id696 . 1) (244 . 246) (240 . 244) (t 26164 13971 311717 681000)) nil (26164 13975 754090 0) 0 nil])
([nil nil ((324 . 325) (#(")" 0 1 (face font-lock-type-face fontified nil)) . -324) (324 . 325) (#(")" 0 1 (fontified t)) . 313) (undo-tree-id697 . 1) (308 . 314) (t 26164 13975 768819 736000)) nil (26164 13981 332897 0) 0 nil])
([nil nil ((392 . 393) (#(")" 0 1 (fontified nil)) . -392) (392 . 393) (#(")" 0 1 (fontified t)) . 381) (undo-tree-id698 . 1) (378 . 382) (376 . 378) (t 26164 13981 342631 775000)) nil (26164 13986 71666 0) 0 nil])
([nil nil ((507 . 508) (#(")" 0 1 (fontified nil)) . -507) (507 . 508) (#(")" 0 1 (fontified t)) . 496) (undo-tree-id699 . 1) (491 . 497) (t 26164 13986 80154 456000)) nil (26164 13990 930338 0) 0 nil])
([nil nil ((575 . 576) (#(")" 0 1 (fontified nil)) . -575) (575 . 576) (#(")" 0 1 (fontified t)) . 564) (undo-tree-id700 . 1) (559 . 565) (t 26164 13990 938806 355000)) nil (26164 13995 268235 0) 0 nil])
([nil nil ((#("        (States::S2, Inputs::A) => (States::S0, Some(Outputs::O1)),
        (States::S2, Inputs::A) => (States::S0, Some(Outputs::O1)),
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 9 (fontified t) 9 15 (face font-lock-type-face fontified t) 15 17 (fontified t) 17 18 (face font-lock-type-face fontified t) 18 19 (face font-lock-type-face fontified t) 19 21 (fontified t) 21 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 30 (face font-lock-type-face fontified t) 30 32 (fontified t) 32 33 (prettify-symbols-end 477 prettify-symbols-start 475 composition (3 2 [8658]) fontified t) 33 34 (prettify-symbols-end 477 prettify-symbols-start 475 composition (3 2 [8658]) syntax-table (1) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 42 (face font-lock-type-face fontified t) 42 44 (fontified t) 44 45 (face font-lock-type-face fontified t) 45 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 52 (face font-lock-type-face fontified t) 52 53 (fontified t) 53 60 (face font-lock-type-face fontified t) 60 62 (fontified t) 62 63 (face font-lock-type-face fontified t) 63 64 (face font-lock-type-face fontified t rear-nonsticky t) 64 65 (fontified t) 65 67 (fontified t) 67 68 (fontified t) 68 75 (fontified t) 75 76 (fontified t rear-nonsticky t) 76 77 (fontified t) 77 83 (face font-lock-type-face fontified t) 83 85 (fontified t) 85 86 (face font-lock-type-face fontified t) 86 87 (face font-lock-type-face fontified t) 87 89 (fontified t) 89 95 (face font-lock-type-face fontified t) 95 97 (fontified t) 97 98 (face font-lock-type-face fontified t) 98 100 (fontified t) 100 101 (prettify-symbols-end 545 prettify-symbols-start 543 composition (3 2 [8658]) fontified t) 101 102 (prettify-symbols-end 545 prettify-symbols-start 543 composition (3 2 [8658]) syntax-table (1) fontified t) 102 103 (fontified t) 103 104 (fontified t) 104 110 (face font-lock-type-face fontified t) 110 112 (fontified t) 112 113 (face font-lock-type-face fontified t) 113 114 (face font-lock-type-face fontified t) 114 116 (fontified t) 116 120 (face font-lock-type-face fontified t) 120 121 (fontified t) 121 128 (face font-lock-type-face fontified t) 128 130 (fontified t) 130 131 (face font-lock-type-face fontified t) 131 132 (face font-lock-type-face fontified t rear-nonsticky t) 132 133 (fontified t) 133 135 (fontified t) 135 136 (fontified t)) . 443) (undo-tree-id701 . -132) (undo-tree-id702 . -64) (undo-tree-id703 . -132) (undo-tree-id704 . 3) (undo-tree-id705 . -135) (undo-tree-id706 . -132) (undo-tree-id707 . -53) (undo-tree-id708 . -52) (undo-tree-id709 . -53) (undo-tree-id710 . -65) (undo-tree-id711 . -64) (undo-tree-id712 . -64) (undo-tree-id713 . -65) (undo-tree-id714 . -134) (undo-tree-id715 . -64) (undo-tree-id716 . -121) (undo-tree-id717 . -120) (undo-tree-id718 . -121) (undo-tree-id719 . 15) (undo-tree-id720 . -133) (undo-tree-id721 . -132) (undo-tree-id722 . -132) (undo-tree-id723 . -133) (undo-tree-id724 . -132) (undo-tree-id725 . -132) (undo-tree-id726 . -132) (undo-tree-id727 . -132) (undo-tree-id728 . -132) (undo-tree-id729 . -132) (undo-tree-id730 . -132) (undo-tree-id731 . -132) (undo-tree-id732 . -132) (undo-tree-id733 . -132) (undo-tree-id734 . -132) (undo-tree-id735 . -132) (undo-tree-id736 . -132) (undo-tree-id737 . -132) (undo-tree-id738 . -132) (undo-tree-id739 . -132) (undo-tree-id740 . -132) (undo-tree-id741 . -132) (undo-tree-id742 . -64) (undo-tree-id743 . -132) (undo-tree-id744 . -64) (undo-tree-id745 . -64) (undo-tree-id746 . -64) (undo-tree-id747 . -64) (undo-tree-id748 . -64) (undo-tree-id749 . -64) (undo-tree-id750 . -64) (undo-tree-id751 . -68) (undo-tree-id752 . -132) (undo-tree-id753 . -64) (undo-tree-id754 . -132) (undo-tree-id755 . -136) 575 (t 26164 13995 276836 727000)) nil (26164 13998 611792 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -489) (442 . 490) 419 (t 26164 13998 620338 953000)) nil (26164 14012 393793 0) 0 nil])
([nil nil ((461 . 462) (#("0" 0 1 (face font-lock-type-face fontified t)) . 461) (undo-tree-id756 . -1)) nil (26164 14012 393789 0) 0 nil])
([nil nil ((480 . 481) (#("0" 0 1 (face font-lock-type-face fontified t)) . 480) (undo-tree-id757 . -1) (t 26164 14012 402351 719000)) nil (26164 14014 560632 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -536) (489 . 537) 480 (t 26164 14014 569299 142000)) nil (26164 14019 941871 0) 0 nil])
([nil nil ((508 . 509) (#("1" 0 1 (face font-lock-type-face fontified t)) . 508) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1)) nil (26164 14019 941867 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 511) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (t 26164 14019 950596 853000)) nil (26164 14029 827691 0) 0 nil])
([nil nil ((511 . 520)) nil (26164 14029 827677 0) 0 nil])
([nil nil ((#("        (States::S2, Inputs::B) => (States::S1, None),
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 9 (fontified t) 9 15 (face font-lock-type-face fontified t) 15 17 (fontified t) 17 18 (face font-lock-type-face fontified t) 18 19 (face font-lock-type-face fontified t) 19 21 (fontified t) 21 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 30 (face font-lock-type-face fontified t) 30 32 (fontified t) 32 33 (prettify-symbols-end 524 prettify-symbols-start 522 composition (3 2 [8658]) fontified t) 33 34 (prettify-symbols-end 524 prettify-symbols-start 522 composition (3 2 [8658]) syntax-table (1) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 42 (face font-lock-type-face fontified t) 42 44 (fontified t) 44 45 (face font-lock-type-face fontified t) 45 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 52 (face font-lock-type-face fontified t) 52 54 (fontified t) 54 55 (fontified t)) . 490) (undo-tree-id767 . -55) (undo-tree-id768 . -55) (undo-tree-id769 . -55) (undo-tree-id770 . -55) (undo-tree-id771 . 25) (undo-tree-id772 . -29) (undo-tree-id773 . -54) (undo-tree-id774 . -55) (undo-tree-id775 . -55) (undo-tree-id776 . -55) (undo-tree-id777 . -55) (undo-tree-id778 . -55) (undo-tree-id779 . -55) (undo-tree-id780 . -55) (undo-tree-id781 . -55) (undo-tree-id782 . -55) (undo-tree-id783 . -55) (undo-tree-id784 . -55) (undo-tree-id785 . -55) (undo-tree-id786 . -55) (undo-tree-id787 . -55) (undo-tree-id788 . -55) (undo-tree-id789 . -55) (undo-tree-id790 . -55) (undo-tree-id791 . -21) (undo-tree-id792 . -21) (undo-tree-id793 . -21) (undo-tree-id794 . -21) (undo-tree-id795 . 26) (undo-tree-id796 . -29) (undo-tree-id797 . -29) (undo-tree-id798 . -29) (undo-tree-id799 . -29) (undo-tree-id800 . -29) (undo-tree-id801 . -29) (undo-tree-id802 . -29) (undo-tree-id803 . -29) (undo-tree-id804 . -29) (undo-tree-id805 . -29) (undo-tree-id806 . -29) (undo-tree-id807 . -29) (undo-tree-id808 . -29) (undo-tree-id809 . -29) (undo-tree-id810 . -29) (undo-tree-id811 . -29) (undo-tree-id812 . -29) (undo-tree-id813 . -29) (undo-tree-id814 . -55) 519 (t 26164 14029 836394 526000)) nil (26164 14031 749126 0) 0 nil])
([nil nil ((396 . 451) 400) nil (26164 14031 749073 0) 0 nil])
([nil nil ((441 . 442) (#("1" 0 1 (face font-lock-type-face fontified t)) . 441) (undo-tree-id815 . -1) (t 26164 14031 758669 814000)) nil (26164 14034 319932 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 472) (t 26164 14034 328943 324000)) nil (26164 14112 662926 0) 0 nil])
([nil nil ((472 . 481)) nil (26164 14112 662922 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 527) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (t 26164 14112 671848 426000)) nil (26164 14120 543365 0) 0 nil])
([nil nil ((527 . 536)) nil (26164 14120 543350 0) 0 nil])
([nil nil ((#("        (States::S0, Inputs::A) => (States::S0, None),
        (States::S1, Inputs::B) => (States::S1, None),
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 9 (fontified t) 9 15 (face font-lock-type-face fontified t) 15 17 (fontified t) 17 18 (face font-lock-type-face fontified t) 18 19 (face font-lock-type-face fontified t) 19 21 (fontified t) 21 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 30 (face font-lock-type-face fontified t) 30 32 (fontified t) 32 33 (prettify-symbols-end 485 prettify-symbols-start 483 composition (3 2 [8658]) fontified t) 33 34 (prettify-symbols-end 485 prettify-symbols-start 483 composition (3 2 [8658]) syntax-table (1) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 42 (face font-lock-type-face fontified t) 42 44 (fontified t) 44 45 (face font-lock-type-face fontified t) 45 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 52 (face font-lock-type-face fontified t) 52 54 (fontified t) 54 55 (fontified t) 55 62 (fontified t) 62 63 (fontified t rear-nonsticky t) 63 64 (fontified t) 64 70 (face font-lock-type-face fontified t) 70 72 (fontified t) 72 73 (face font-lock-type-face fontified t) 73 74 (face font-lock-type-face fontified t) 74 76 (fontified t) 76 82 (face font-lock-type-face fontified t) 82 84 (fontified t) 84 85 (face font-lock-type-face fontified t) 85 87 (fontified t) 87 88 (prettify-symbols-end 540 prettify-symbols-start 538 composition (3 2 [8658]) fontified t) 88 89 (prettify-symbols-end 540 prettify-symbols-start 538 composition (3 2 [8658]) syntax-table (1) fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 97 (face font-lock-type-face fontified t) 97 99 (fontified t) 99 100 (face font-lock-type-face fontified t) 100 101 (face font-lock-type-face fontified t) 101 103 (fontified t) 103 107 (face font-lock-type-face fontified t) 107 109 (fontified t) 109 110 (fontified t)) . 451) (undo-tree-id820 . -84) (undo-tree-id821 . -29) (undo-tree-id822 . -84) (undo-tree-id823 . 25) (undo-tree-id824 . -84) (undo-tree-id825 . -109) (undo-tree-id826 . -53) (undo-tree-id827 . -110) (undo-tree-id828 . -110) (undo-tree-id829 . -110) (undo-tree-id830 . -110) (undo-tree-id831 . -110) (undo-tree-id832 . -110) (undo-tree-id833 . -110) (undo-tree-id834 . -110) (undo-tree-id835 . -110) (undo-tree-id836 . -110) (undo-tree-id837 . -110) (undo-tree-id838 . -110) (undo-tree-id839 . -110) (undo-tree-id840 . -110) (undo-tree-id841 . -110) (undo-tree-id842 . -110) (undo-tree-id843 . -53) (undo-tree-id844 . -110) (undo-tree-id845 . -110) (undo-tree-id846 . -4) (undo-tree-id847 . -76) (undo-tree-id848 . -76) (undo-tree-id849 . 26) (undo-tree-id850 . -84) (undo-tree-id851 . -84) (undo-tree-id852 . -84) (undo-tree-id853 . -84) (undo-tree-id854 . -84) (undo-tree-id855 . -84) (undo-tree-id856 . -84) (undo-tree-id857 . -84) (undo-tree-id858 . -84) (undo-tree-id859 . -84) (undo-tree-id860 . -84) (undo-tree-id861 . -84) (undo-tree-id862 . -84) (undo-tree-id863 . -84) (undo-tree-id864 . -84) (undo-tree-id865 . -84) (undo-tree-id866 . -84) (undo-tree-id867 . -84) (undo-tree-id868 . -84) (undo-tree-id869 . -84) (undo-tree-id870 . -84) (undo-tree-id871 . -84) (undo-tree-id872 . -84) (undo-tree-id873 . -84) (undo-tree-id874 . -84) (undo-tree-id875 . -84) (undo-tree-id876 . -29) (undo-tree-id877 . -84) (undo-tree-id878 . -29) (undo-tree-id879 . -29) (undo-tree-id880 . -29) (undo-tree-id881 . -29) (undo-tree-id882 . -55) (undo-tree-id883 . -84) (undo-tree-id884 . -29) (undo-tree-id885 . -84) (undo-tree-id886 . -110) 535 (t 26164 14120 553194 324000)) nil (26164 14129 257331 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -560) (450 . 561) 400) nil (26164 14129 257264 0) 0 nil])
([nil nil ((105 . 106) (t 26164 14129 266503 887000) 104) nil (26164 14143 883548 0) 0 nil])
([nil nil ((106 . 107)) nil (26164 14143 883547 0) 0 nil])
([nil nil ((107 . 117)) nil (26164 14143 883546 0) 0 nil])
([nil nil ((117 . 121) (#("    " 0 4 (fontified nil)) . 117) (117 . 121) (116 . 118)) nil (26164 14143 883542 0) 0 nil])
([nil nil ((135 . 137) (130 . 135) (128 . 130) (123 . 128) (121 . 123) (t 26164 14143 892932 980000)) nil (26164 14149 529455 0) 0 nil])
([nil nil ((#("enum AP {
    P,
    Q,
    R,
}

" 0 4 (face bold fontified t) 4 5 (fontified t) 5 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 10 (fontified t) 10 14 (fontified t) 14 15 (face font-lock-type-face fontified t) 15 17 (fontified t) 17 21 (fontified t) 21 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 28 (fontified t) 28 29 (face font-lock-type-face fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t)) . 107) (undo-tree-id887 . -33) (undo-tree-id888 . 4) (undo-tree-id889 . -4) (undo-tree-id890 . 2) (undo-tree-id891 . -4) (undo-tree-id892 . -33) (undo-tree-id893 . -24) (undo-tree-id894 . -24) (undo-tree-id895 . -34) (undo-tree-id896 . -34) (undo-tree-id897 . -33) (undo-tree-id898 . -33) (undo-tree-id899 . -33) (undo-tree-id900 . -33) (undo-tree-id901 . -33) (undo-tree-id902 . -33) (undo-tree-id903 . -33) (undo-tree-id904 . -33) (undo-tree-id905 . -34) (undo-tree-id906 . -34) 141 (t 26164 14149 538770 627000)) nil (26164 14206 731133 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 34 . 35) (nil fontified nil 34 . 35) (nil fontified nil 33 . 34) (nil fontified nil 32 . 33) (nil fontified nil 31 . 32) (nil fontified nil 30 . 31) (nil fontified nil 29 . 30) (nil fontified nil 25 . 29) (nil fontified nil 23 . 25) (nil fontified nil 22 . 23) (nil fontified nil 18 . 22) (nil fontified nil 16 . 18) (nil fontified nil 15 . 16) (nil fontified nil 11 . 15) (nil fontified nil 9 . 11) (nil fontified nil 8 . 9) (nil fontified nil 6 . 8) (nil fontified nil 5 . 6) (nil fontified nil 1 . 5) (1 . 35) (1 . 2)) nil (26164 14206 731104 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 35) (undo-tree-id907 . 1) (undo-tree-id908 . -1) (t 26164 14206 740306 878000)) nil (26164 14207 205535 0) 0 nil])
([nil nil ((602 . 603) (t 26164 14207 213792 39000) 601) nil (26164 14269 449556 0) 0 nil])
([nil nil ((603 . 604)) nil (26164 14269 449555 0) 0 nil])
([nil nil ((604 . 606)) nil (26164 14269 449554 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 607 613 nil nil nil t #s(yas--field 2 614 623 nil nil nil t #s(yas--exit 631 nil))) #s(yas--field 2 614 623 nil nil nil t #s(yas--exit 631 nil))) #s(yas--exit 631 nil) 12 nil #s(yas--field 2 614 623 nil nil nil t #s(yas--exit 631 nil)) nil nil)) (604 . 622) (#("fn" 0 2 (face bold fontified t)) . 604) (undo-tree-id933 . -2) 606) nil (26164 14269 449553 0) 0 nil])
([nil nil ((608 . 613) (#("name" 0 4 (face font-lock-function-name-face fontified nil)) . 608) (607 . 608)) nil (26164 14269 449551 0) 0 nil])
([nil nil ((614 . 620)) nil (26164 14269 449550 0) 0 nil])
([nil nil ((614 . 623) (#("States" 0 6 (fontified nil)) . 614) (614 . 620) (#("s: States" 0 9 (fontified nil)) . -614) (614 . 623) (#("States" 0 6 (face font-lock-type-face fontified t)) . -614) (undo-tree-id930 . -6) (undo-tree-id931 . -6) (undo-tree-id932 . -6) 620) nil (26164 14269 449549 0) 0 nil])
([nil nil ((apply yas--snippet-revive 604 633 #s(yas--snippet nil (#s(yas--field 1 607 613 nil nil nil t #s(yas--field 2 614 623 nil nil nil t #s(yas--exit 631 nil))) #s(yas--field 2 614 623 nil nil nil t #s(yas--exit 631 nil))) #s(yas--exit 631 nil) 12 nil #s(yas--field 2 614 623 nil nil nil t #s(yas--exit 631 nil)) nil nil))) nil (26164 14269 449544 0) 0 nil])
([nil nil ((631 . 636)) nil (26164 14269 449543 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 637 638 nil nil nil t #s(yas--exit 642 nil))) #s(yas--exit 642 nil) 13 nil #s(yas--field 1 637 638 nil nil nil t #s(yas--exit 642 nil)) nil nil)) (631 . 647) (#("match $1 {
	$0
    }" 0 20 (fontified nil)) . 631) (646 . 650) (642 . 643) (#("    " 0 4 (fontified nil)) . 642) (631 . 650) (#("match" 0 5 (fontified nil)) . 631) (631 . 636) (#("match" 0 5 (face bold fontified t)) . -631) (undo-tree-id927 . -5) (undo-tree-id928 . -5) (undo-tree-id929 . -5) 636) nil (26164 14269 449542 0) 0 nil])
([nil nil ((637 . 639)) nil (26164 14269 449528 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -638) (undo-tree-id926 . -1) 639) nil (26164 14269 449527 0) 0 nil])
([nil nil ((apply yas--snippet-revive 631 648 #s(yas--snippet nil (#s(yas--field 1 637 638 nil nil nil t #s(yas--exit 642 nil))) #s(yas--exit 642 nil) 13 nil #s(yas--field 1 637 638 nil nil nil t #s(yas--exit 642 nil)) nil nil))) nil (26164 14269 449525 0) 0 nil])
([nil nil ((642 . 647)) nil (26164 14269 449524 0) 0 nil])
([nil nil ((apply yas--snippet-revive 642 652 #s(yas--snippet nil nil #s(yas--exit 652 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 652 nil) 14 nil nil nil nil)) (642 . 652) (#("States::S0$0" 0 12 (fontified nil)) . 642) (642 . 654) (#("State" 0 5 (fontified nil)) . 642) (642 . 647) (#("States::S0" 0 10 (fontified nil)) . -642) (642 . 652) (#("State" 0 5 (face font-lock-type-face fontified t)) . -642) (undo-tree-id923 . -5) (undo-tree-id924 . -5) (undo-tree-id925 . -5) 647) nil (26164 14269 449523 0) 0 nil])
([nil nil ((652 . 659)) nil (26164 14269 449517 0) 0 nil])
([nil nil ((659 . 661)) nil (26164 14269 450608 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -658) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (#("P" 0 1 (face font-lock-type-face fontified t)) . -659) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -660) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) 661) nil (26164 14276 556776 0) 0 nil] [nil nil ((apply yas--snippet-revive 659 675 #s(yas--snippet nil nil #s(yas--exit #<marker at 741 in main.rs/statemachine> nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 741 in main.rs/statemachine> nil) 15 nil nil nil nil)) (659 . 675) (#("unimplemented!($0)" 0 18 (fontified nil)) . 659) (659 . 677) (#("Pm" 0 2 (fontified nil)) . 659) (659 . 661) (#("unimplemented!(â€¦)" 0 17 (fontified nil)) . -659) (659 . 676) (#("Pm" 0 2 (face font-lock-type-face fontified t)) . -659) (undo-tree-id909 . -2) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -2) (undo-tree-id915 . -2) (undo-tree-id916 . -2) (undo-tree-id917 . -2) (undo-tree-id918 . -2) (undo-tree-id919 . -2) (undo-tree-id920 . -2) (undo-tree-id921 . -2) (undo-tree-id922 . -2) 661) ((659 . 661) (#("unimplemented!(â€¦)" 0 17 (fontified nil)) . 659) (659 . 676) (#("Pm" 0 2 (fontified nil)) . 659) (659 . 661) (#("unimplemented!($0)" 0 18 (fontified nil)) . 659) (659 . 677) (#("unimplemented!()" 0 14 (face font-lock-preprocessor-face fontified t) 14 16 (fontified t)) . 659) (undo-tree-id934 . -15) (undo-tree-id935 . -15) (undo-tree-id936 . -15) (undo-tree-id937 . -15)) (26164 14269 449513 0) 0 nil])
([nil nil ((658 . 662)) nil (26164 14276 556766 0) 0 nil])
nil
([nil nil ((662 . 668)) nil (26164 14276 556765 0) 0 nil])
([nil nil ((663 . 664)) nil (26164 14276 556765 0) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-type-face fontified t)) . -661) (undo-tree-id938 . -1) (#("
" 0 1 (fontified t)) . -662) (undo-tree-id939 . -1) (#("k" 0 1 (fontified t)) . -663) (undo-tree-id940 . -1) 664) nil (26164 14276 556763 0) 0 nil])
([nil nil ((661 . 662)) nil (26164 14276 556753 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -664) (662 . 663)) nil (26164 14276 556749 0) 0 nil])
([nil nil ((664 . 668) (t 26164 14276 566351 711000)) nil (26164 14294 484783 0) 0 nil])
([nil nil ((668 . 670)) nil (26164 14294 484782 0) 0 nil])
([nil nil ((apply yas--snippet-revive 664 674 #s(yas--snippet nil nil #s(yas--exit 674 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 674 nil) 16 nil nil nil nil)) (664 . 674) (#("States::S1$0" 0 12 (fontified nil)) . 664) (664 . 676) (#("States" 0 6 (fontified nil)) . 664) (664 . 670) (#("States::S1" 0 10 (fontified nil)) . -664) (664 . 674) (#("States" 0 6 (face font-lock-type-face fontified t)) . -664) (undo-tree-id955 . -6) (undo-tree-id956 . -6) (undo-tree-id957 . -6) 670) nil (26164 14294 484781 0) 0 nil])
([nil nil ((674 . 676)) nil (26164 14294 484775 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -675) (undo-tree-id954 . -1) 676) nil (26164 14294 484774 0) 0 nil])
([nil nil ((675 . 684)) nil (26164 14294 484772 0) 0 nil])
([nil nil ((684 . 686)) nil (26164 14294 484771 0) 0 nil])
([nil nil ((686 . 691)) nil (26164 14294 484770 0) 0 nil])
([nil nil ((apply yas--snippet-revive 686 696 #s(yas--snippet nil nil #s(yas--exit 696 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 696 nil) 17 nil nil nil nil)) (686 . 696) (#("States::S2$0" 0 12 (fontified nil)) . 686) (686 . 698) (#("State" 0 5 (fontified nil)) . 686) (686 . 691) (#("States::S2" 0 10 (fontified nil)) . -686) (686 . 696) (#("State" 0 5 (face font-lock-type-face fontified t)) . -686) (undo-tree-id951 . -5) (undo-tree-id952 . -5) (undo-tree-id953 . -5) 691) nil (26164 14294 484768 0) 0 nil])
([nil nil ((696 . 704)) nil (26164 14294 484744 0) 0 nil])
([nil nil ((apply yas--snippet-revive 704 705 #s(yas--snippet nil nil #s(yas--exit 705 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 705 nil) 18 nil nil nil nil)) (704 . 705) (#("R$0" 0 3 (fontified nil)) . 704) (704 . 707) (#("R" 0 1 (fontified nil)) . -704) (704 . 705)) nil (26164 14294 484742 0) 0 nil])
([nil nil ((705 . 706)) nil (26164 14294 484738 0) 0 nil])
([nil nil ((641 . 649) (#("	" 0 1 (fontified t)) . 641) (663 . 671) (#("	" 0 1 (fontified t)) . 663) (685 . 693) (#("	" 0 1 (fontified t)) . 685) 706 (t 26164 14294 494738 399000)) nil (26164 14300 73606 0) 0 nil])
([nil nil ((625 . 631) (t 26164 14300 85138 798000)) nil (26164 14304 325495 0) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 781) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -5) (781 . 785) (781 . 782) (t 26164 14304 335840 531000)) nil (26164 14355 209958 0) 0 nil])
([nil nil ((apply yas--snippet-revive 743 779 #s(yas--snippet nil (#s(yas--field 1 746 751 nil nil nil t #s(yas--field 2 752 769 nil nil nil t #s(yas--exit 777 nil))) #s(yas--field 2 752 769 nil nil nil t #s(yas--exit 777 nil))) #s(yas--exit 777 nil) 19 nil #s(yas--field 2 752 769 nil nil nil t #s(yas--exit 777 nil)) nil nil)) (760 . 769) (#("Inpu" 0 4 (fontified nil)) . 760) (760 . 764) (#("i: Inputs" 0 9 (fontified nil)) . -760) (760 . 769) (#("Inpu" 0 4 (face font-lock-type-face fontified t)) . -760) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (undo-tree-id971 . -4) 764 (752 . 764) (#("u" 0 1 (face font-lock-function-name-face fontified t)) . -751) (undo-tree-id972 . -1) 752 (747 . 752) (#("name" 0 4 (face font-lock-function-name-face fontified nil)) . 747) (746 . 747) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 746 751 nil nil nil t #s(yas--field 2 752 769 nil nil nil t #s(yas--exit 777 nil))) #s(yas--field 2 752 769 nil nil nil t #s(yas--exit 777 nil))) #s(yas--exit 777 nil) 19 nil #s(yas--field 2 752 769 nil nil nil t #s(yas--exit 777 nil)) nil nil)) (743 . 761) (#("fn" 0 2 (face bold fontified t)) . 743) (undo-tree-id973 . -2) 745 (743 . 745) (743 . 744) (743 . 744) (t 26164 14355 220018 214000)) nil (26164 14371 793185 0) 0 nil])
([nil nil ((752 . 755)) nil (26164 14371 793170 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -776) (undo-tree-id992 . -4) (undo-tree-id993 . -3) (undo-tree-id994 . -3) (undo-tree-id995 . -4) (undo-tree-id996 . -3) (undo-tree-id997 . -4) (undo-tree-id998 . -4) (undo-tree-id999 . -4) (undo-tree-id1000 . -4) (undo-tree-id1001 . -4) (undo-tree-id1002 . -4) (undo-tree-id1003 . -4) 780 (t 26164 14371 802270 461000)) nil (26164 14398 785214 0) 0 nil])
([nil nil ((774 . 779)) nil (26164 14398 785203 0) 0 nil])
([nil nil ((779 . 780) (#("

" 0 1 (fontified t) 1 2 (fontified t)) . 780) (undo-tree-id981 . 1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) 778) nil (26164 14398 785201 0) 0 nil])
([nil nil ((778 . 783)) nil (26164 14398 785191 0) 0 nil])
([nil nil ((778 . 784) (#("State" 0 5 (fontified nil)) . 778) (778 . 783) (#("States" 0 6 (fontified nil)) . -778) (778 . 784) (#("State" 0 5 (face font-lock-type-face fontified t)) . -778) (undo-tree-id978 . -5) (undo-tree-id979 . -5) (undo-tree-id980 . -5) 783) nil (26164 14398 785190 0) 0 nil])
([nil nil ((784 . 786)) nil (26164 14398 785185 0) 0 nil])
([nil nil ((#("States, " 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -778) (undo-tree-id977 . -8) 786) nil (26164 14398 785184 0) 0 nil])
([nil nil ((778 . 784)) nil (26164 14398 785182 0) 0 nil])
([nil nil ((778 . 785) (#("Output" 0 6 (fontified nil)) . 778) (778 . 784) (#("Outputs" 0 7 (fontified nil)) . -778) (778 . 785) (#("Output" 0 6 (face font-lock-type-face fontified t)) . -778) (undo-tree-id974 . -6) (undo-tree-id975 . -6) (undo-tree-id976 . -6) 784) nil (26164 14398 785181 0) 0 nil])
([nil nil ((785 . 789)) nil (26164 14398 785170 0) 0 nil])
([nil nil ((793 . 797) (#("    " 0 4 (fontified nil)) . 793) (793 . 797) (792 . 794)) nil (26164 14398 785165 0) 0 nil])
([nil nil ((803 . 807) (797 . 804) (t 26164 14398 795143 566000)) nil (26164 14409 565297 0) 0 nil])
([nil nil ((808 . 810)) nil (26164 14409 565295 0) 0 nil])
([nil nil ((810 . 811) (811 . 815) (#("	" 0 1 (fontified nil)) . 810) (810 . 811) (809 . 811)) nil (26164 14409 565292 0) 0 nil])
([nil nil ((802 . 803) (#("{
	
" 0 4 (fontified t)) . 808) (undo-tree-id1004 . -3) (undo-tree-id1005 . -3) (undo-tree-id1006 . -1) (undo-tree-id1007 . -3) (undo-tree-id1008 . -3) (undo-tree-id1009 . -3) (undo-tree-id1010 . -3) (undo-tree-id1011 . -3) (undo-tree-id1012 . -3) (undo-tree-id1013 . -3) (undo-tree-id1014 . -3) (undo-tree-id1015 . -3) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3) (undo-tree-id1018 . -3) (undo-tree-id1019 . -3) (undo-tree-id1020 . -3) (undo-tree-id1021 . -2) (undo-tree-id1022 . -3) (undo-tree-id1023 . -3) (undo-tree-id1024 . -3) (undo-tree-id1025 . -3) (undo-tree-id1026 . -3) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -3) (undo-tree-id1030 . -3) (undo-tree-id1031 . -3) (813 . 814) (#("   " 0 3 (fontified t)) . 813) 811 (t 26164 14409 575009 42000)) nil (26164 14414 576053 0) 0 nil])
([nil nil ((#("    match (s, i) {}" 0 4 (fontified t) 4 9 (face bold fontified t) 9 10 (fontified t) 10 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t)) . 793) (undo-tree-id1039 . -9) (undo-tree-id1040 . -15) (undo-tree-id1041 . -11) (undo-tree-id1042 . -9) (undo-tree-id1043 . -13) (undo-tree-id1044 . -16) (undo-tree-id1045 . -15) (t 26164 14414 585220 349000)) nil (26164 14427 917485 0) 0 nil])
([nil nil ((793 . 797)) nil (26164 14427 917478 0) 0 nil])
([nil nil ((797 . 802)) nil (26164 14427 917477 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 807 808 nil nil nil nil #s(yas--field 2 810 811 nil nil nil nil #s(yas--exit 812 nil))) #s(yas--field 2 810 811 nil nil nil nil #s(yas--exit 812 nil))) #s(yas--exit 812 nil) 20 nil #s(yas--field 2 810 811 nil nil nil nil #s(yas--exit 812 nil)) nil nil)) (797 . 812) (#("_relation(${1:s}, ${2:i})$0" 0 27 (fontified nil)) . 797) (797 . 824) (#("_rela" 0 5 (fontified nil)) . 797) (797 . 802) (#("_relation(â€¦)" 0 12 (fontified nil)) . -797) (797 . 809) (#("_rela" 0 5 (fontified t)) . -797) (undo-tree-id1036 . -5) (undo-tree-id1037 . -5) (undo-tree-id1038 . -5) 802) nil (26164 14427 917476 0) 0 nil])
([nil nil ((apply yas--snippet-revive 797 812 #s(yas--snippet nil (#s(yas--field 1 807 808 nil nil nil nil #s(yas--field 2 810 811 nil nil nil nil #s(yas--exit 812 nil))) #s(yas--field 2 810 811 nil nil nil nil #s(yas--exit 812 nil))) #s(yas--exit 812 nil) 20 nil #s(yas--field 2 810 811 nil nil nil nil #s(yas--exit 812 nil)) nil nil))) nil (26164 14427 917470 0) 0 nil])
([nil nil ((805 . 806) (820 . 821) (797 . 797) (797 . 805)) nil (26164 14427 917469 0) 0 nil])
([nil nil ((822 . 823)) nil (26164 14427 917467 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -822) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) 823) nil (26164 14427 917464 0) 0 nil])
([nil nil ((860 . 865) (858 . 859) (855 . 859) (850 . 855) (849 . 850) (apply yas--snippet-revive 836 849 #s(yas--snippet nil (#s(yas--field 1 843 848 nil nil nil t #s(yas--exit 849 nil))) #s(yas--exit 849 nil) 21 nil #s(yas--field 1 843 848 nil nil nil t #s(yas--exit 849 nil)) nil nil)) (846 . 847) (844 . 847) (#("s" 0 1 (fontified nil)) . 844) (843 . 844) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 843 848 nil nil nil t #s(yas--exit 849 nil))) #s(yas--exit 849 nil) 21 nil #s(yas--field 1 843 848 nil nil nil t #s(yas--exit 849 nil)) nil nil)) (836 . 845) (#("_label(${1:s})$0" 0 16 (fontified nil)) . 836) (836 . 852) (#("_la" 0 3 (fontified nil)) . 836) (836 . 839) (#("_label(â€¦)" 0 9 (fontified nil)) . -836) (836 . 845) (#("_la" 0 3 (fontified t)) . -836) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) 839 (827 . 839) (#("o" 0 1 (fontified t)) . -827) (undo-tree-id1049 . -1) (#("o" 0 1 (fontified t)) . -828) (undo-tree-id1050 . -1) 829 (827 . 829) (822 . 827) (t 26164 14427 928512 809000)) nil (26164 14459 347385 0) 0 nil])
([nil nil ((855 . 856) (864 . 865) (t 26164 14459 373750 952000)) nil (26164 14462 702118 0) 0 nil])
([nil nil ((778 . 779) (t 26164 14462 712344 16000)) nil (26164 14477 481623 0) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -778) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) 779) nil (26164 14477 481621 0) 0 nil])
([nil nil ((778 . 784)) nil (26164 14477 481618 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-type-face fontified t)) . -783) (undo-tree-id1068 . -1) 784) nil (26164 14477 481617 0) 0 nil])
([nil nil ((785 . 791) (783 . 786)) nil (26164 14477 481615 0) 0 nil])
([nil nil ((785 . 792) (#("Output" 0 6 (fontified nil)) . 785) (785 . 791) (#("Outputs" 0 7 (fontified nil)) . -785) (785 . 792) (#("Output" 0 6 (face font-lock-type-face fontified t)) . -785) (undo-tree-id1062 . -6) (undo-tree-id1063 . -6) (undo-tree-id1064 . -5) (undo-tree-id1065 . -6) (undo-tree-id1066 . -6) (undo-tree-id1067 . -6) 791) nil (26164 14477 481613 0) 0 nil])
([nil nil ((#("Outputs" 0 7 (face font-lock-type-face fontified t)) . -793) (undo-tree-id1051 . -7) (undo-tree-id1052 . -7) (undo-tree-id1053 . -7) (undo-tree-id1054 . -7) (undo-tree-id1055 . -7) (undo-tree-id1056 . -7) (undo-tree-id1057 . -7) (undo-tree-id1058 . -7) (undo-tree-id1059 . -7) (undo-tree-id1060 . -7) (undo-tree-id1061 . -7) 800) nil (26164 14477 481600 0) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . 866) (t 26164 14477 491818 232000)) nil (26164 14496 912820 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 866)) nil (26164 14496 912819 0) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 866)) nil (26164 14496 912817 0) 0 nil])
([nil nil ((866 . 868)) nil (26164 14496 912814 0) 0 nil])
([nil nil ((#("[0]" 0 3 (fontified t)) . 853) (undo-tree-id1072 . -2) (undo-tree-id1073 . -3) (t 26164 14496 922931 896000)) nil (26164 14501 424043 0) 0 nil])
([nil nil ((853 . 855)) nil (26164 14501 424033 0) 0 nil])
([nil nil ((866 . 867) (#("0" 0 1 (fontified t)) . 866) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (t 26164 14501 434475 288000)) nil (26164 14504 599597 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 872) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (t 26164 14504 609603 182000)) nil (26164 14507 907715 0) 0 nil])
([nil nil ((773 . 788) (752 . 773) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -752) (undo-tree-id1080 . -1) (#("x" 0 1 (face font-lock-comment-face fontified t)) . -753) (undo-tree-id1081 . -1) 754 (751 . 754) (apply yas--snippet-revive 743 751 #s(yas--snippet nil nil #s(yas--exit 751 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 751 nil) 22 nil nil nil nil)) (743 . 751) (#("x" 0 1 (fontified t)) . 743) (undo-tree-id1082 . -1) 744 (743 . 744) (743 . 744) 756 (t 26164 14507 918250 689000)) nil (26164 14538 736768 0) 0 nil])
([nil nil ((977 . 978) (988 . 989) (976 . 976) (976 . 977) (#("-" 0 1 (fontified t)) . -976) (undo-tree-id1121 . -1) (#(" " 0 1 (fontified t)) . -977) (undo-tree-id1122 . -1) 978 (977 . 978) (972 . 977) (#("s" 0 1 (fontified t)) . -972) (undo-tree-id1123 . -1) 973 (972 . 973) (apply yas--snippet-revive 972 983 #s(yas--snippet nil (#s(yas--field 1 978 979 nil nil nil nil #s(yas--field 2 981 982 nil nil nil nil #s(yas--exit 983 nil))) #s(yas--field 2 981 982 nil nil nil nil #s(yas--exit 983 nil))) #s(yas--exit 983 nil) 24 nil #s(yas--field 1 978 979 nil nil nil nil #s(yas--field 2 981 982 nil nil nil nil #s(yas--exit 983 nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 978 979 nil nil nil nil #s(yas--field 2 981 982 nil nil nil nil #s(yas--exit 983 nil))) #s(yas--field 2 981 982 nil nil nil nil #s(yas--exit 983 nil))) #s(yas--exit 983 nil) 24 nil #s(yas--field 1 978 979 nil nil nil nil #s(yas--field 2 981 982 nil nil nil nil #s(yas--exit 983 nil))) nil nil)) (972 . 983) (#("_exec(${1:s}, ${2:i})$0" 0 23 (fontified nil)) . 972) (972 . 995) (#("_ex" 0 3 (fontified nil)) . 972) (972 . 975) (#("_exec(â€¦)" 0 8 (fontified nil)) . -972) (972 . 980) (#("_ex" 0 3 (fontified t)) . -972) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -3) 975 (972 . 975) (apply yas--snippet-revive 964 978 #s(yas--snippet nil nil #s(yas--exit 972 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 972 nil) 23 nil nil nil nil)) (964 . 978) (#("loop {
	$0
    }" 0 16 (fontified nil)) . 964) (975 . 979) (971 . 972) (#("    " 0 4 (fontified nil)) . 971) (964 . 979) (#("loop" 0 4 (fontified nil)) . 964) (964 . 968) (#("loop" 0 4 (face bold fontified t)) . -964) (undo-tree-id1127 . -4) (undo-tree-id1128 . -4) (undo-tree-id1129 . -4) 968 (964 . 968) (#("whil" 0 4 (fontified t)) . -964) (undo-tree-id1130 . -4) (undo-tree-id1131 . -4) (undo-tree-id1132 . -4) 968 (964 . 968) (959 . 964) (t 26164 14538 747247 937000) 958) nil (26164 14557 811726 0) 0 nil])
([nil nil ((943 . 946) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -943) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -944) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (#(" " 0 1 (fontified t)) . -945) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) 946 (942 . 946)) nil (26164 14557 811689 0) 0 nil])
([nil nil ((990 . 991) (988 . 989) (t 26164 14557 822298 203000)) nil (26164 14562 434171 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 993) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (t 26164 14562 444640 801000)) nil (26164 14572 216537 0) 0 nil])
([nil nil ((apply yas--snippet-revive 993 1002 #s(yas--snippet nil nil #s(yas--exit 1002 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1002 nil) 25 nil nil nil nil)) (993 . 1002) (#("Inputs::B$0" 0 11 (fontified nil)) . 993) (993 . 1004) (#("Input" 0 5 (fontified nil)) . 993) (993 . 998) (#("Inputs::B" 0 9 (fontified nil)) . -993) (993 . 1002) (#("Input" 0 5 (face font-lock-type-face fontified t)) . -993) (undo-tree-id1133 . -5) (undo-tree-id1134 . -5) (undo-tree-id1135 . -4) (undo-tree-id1136 . -5) (undo-tree-id1137 . -5) (undo-tree-id1138 . -5) (undo-tree-id1139 . -5) (undo-tree-id1140 . -5) (undo-tree-id1141 . -5) (undo-tree-id1142 . -5) (undo-tree-id1143 . -5) (undo-tree-id1144 . -5) (undo-tree-id1145 . -5) (undo-tree-id1146 . -5) (undo-tree-id1147 . -5) (undo-tree-id1148 . -5) 998 (993 . 998)) nil (26164 14572 216530 0) 0 nil])
([nil nil ((824 . 832) (t 26164 14572 227296 356000)) nil (26164 14585 384948 0) 0 nil])
([nil nil ((917 . 922) (t 26164 14585 394410 494000)) nil (26164 14589 824065 0) 0 nil])
([nil nil ((919 . 920) (t 26164 14589 834681 839000)) nil (26164 14592 317390 0) 0 nil])
([nil nil ((993 . 995) (t 26164 14592 329171 34000)) nil (26164 14603 618726 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 978) (undo-tree-id1151 . -1) (#("    let mut output " 0 4 (fontified t) 4 7 (face bold fontified t) 7 8 (fontified t) 8 11 (face bold fontified t) 11 12 (fontified t) 12 18 (face font-lock-variable-name-face fontified t) 18 19 (fontified t)) . 978) (undo-tree-id1152 . -19) (undo-tree-id1153 . -18) (undo-tree-id1154 . -19) (undo-tree-id1155 . -19) (undo-tree-id1156 . -19) (undo-tree-id1157 . -19) (undo-tree-id1158 . -19) (undo-tree-id1159 . -19) (undo-tree-id1160 . -19) (undo-tree-id1161 . -19) (undo-tree-id1162 . -19) (undo-tree-id1163 . -19) (982 . 997) (978 . 982) (978 . 979) 987) nil (26164 14603 618723 0) 0 nil])
([nil nil ((#("_s0,  = _exec(_s0, Inputs::B);" 0 8 (fontified t) 8 17 (fontified t) 17 19 (fontified t) 19 25 (face font-lock-type-face fontified t) 25 27 (fontified t) 27 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 30 (fontified t)) . 990) (undo-tree-id1173 . -29) (undo-tree-id1174 . -14) (undo-tree-id1175 . -29) (undo-tree-id1176 . -14) (undo-tree-id1177 . -14) (undo-tree-id1178 . -28) (undo-tree-id1179 . -19) (undo-tree-id1180 . -28) (undo-tree-id1181 . -30) (undo-tree-id1182 . -28) (undo-tree-id1183 . -30) (undo-tree-id1184 . -30) (t 26164 14603 629370 340000)) nil (26164 14609 879311 0) 0 nil])
([nil nil ((990 . 994)) nil (26164 14609 879300 0) 0 nil])
([nil nil ((#("mut " 0 3 (face bold fontified t) 3 4 (fontified t)) . 956) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) (undo-tree-id1166 . -2) (undo-tree-id1167 . -3) (undo-tree-id1168 . -2) (undo-tree-id1169 . -1) (undo-tree-id1170 . -2) (undo-tree-id1171 . -1) (undo-tree-id1172 . -4)) nil (26164 14609 879297 0) 0 nil])
([nil nil ((1024 . 1025) (apply yas--snippet-revive 1003 1024 #s(yas--snippet nil (#s(yas--field 1 1009 1012 nil nil nil t #s(yas--field 2 1014 1023 nil nil nil t #s(yas--exit 1024 nil))) #s(yas--field 2 1014 1023 nil nil nil t #s(yas--exit 1024 nil))) #s(yas--exit 1024 nil) 26 nil #s(yas--field 2 1014 1023 nil nil nil t #s(yas--exit 1024 nil)) nil nil)) (apply yas--snippet-revive 1014 1023 #s(yas--snippet nil nil #s(yas--exit 1023 nil) 27 nil nil #s(yas--field 2 1014 1023 nil nil nil t #s(yas--exit 1024 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1023 nil) 27 nil nil #s(yas--field 2 1014 1023 nil nil nil t #s(yas--exit 1024 nil)) nil)) (1014 . 1023) (#("Inputs::A$0" 0 11 (fontified nil)) . 1014) (undo-tree-id1185 . -11) (1014 . 1025) (#("Input" 0 5 (fontified nil)) . 1014) (undo-tree-id1186 . -5) (1014 . 1019) (#("Inputs::A" 0 9 (fontified nil)) . -1014) (undo-tree-id1187 . -9) (1014 . 1023) (#("Input" 0 5 (face font-lock-type-face fontified t)) . -1014) (undo-tree-id1188 . -5) (undo-tree-id1189 . -5) (undo-tree-id1190 . -5) (undo-tree-id1191 . -4) (undo-tree-id1192 . -5) (undo-tree-id1193 . -5) (undo-tree-id1194 . -5) (undo-tree-id1195 . -5) (undo-tree-id1196 . -5) (undo-tree-id1197 . -5) (undo-tree-id1198 . -5) (undo-tree-id1199 . -5) (undo-tree-id1200 . -5) (undo-tree-id1201 . -5) 1019 (1015 . 1019) (#("i" 0 1 (fontified nil)) . 1015) (undo-tree-id1202 . -1) (1014 . 1015) (1010 . 1012) (#("s" 0 1 (fontified nil)) . 1010) (undo-tree-id1203 . -1) (1009 . 1010) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1009 1012 nil nil nil t #s(yas--field 2 1014 1023 nil nil nil t #s(yas--exit 1024 nil))) #s(yas--field 2 1014 1023 nil nil nil t #s(yas--exit 1024 nil))) #s(yas--exit 1024 nil) 26 nil #s(yas--field 2 1014 1023 nil nil nil t #s(yas--exit 1024 nil)) nil nil)) (1003 . 1014) (#("_exec(${1:s}, ${2:i})$0" 0 23 (fontified nil)) . 1003) (1003 . 1026) (#("_ex" 0 3 (fontified nil)) . 1003) (1003 . 1006) (#("_exec(â€¦)" 0 8 (fontified nil)) . -1003) (1003 . 1011) (#("_ex" 0 3 (fontified t)) . -1003) (undo-tree-id1204 . -3) (undo-tree-id1205 . -3) (undo-tree-id1206 . -3) 1006 (1000 . 1006) (997 . 999) (995 . 997) (991 . 995) (990 . 992) (t 26164 14609 890242 290000)) nil (26164 14637 587670 0) 0 nil])
([nil nil ((999 . 1000) (995 . 996) (991 . 992) (t 26164 14637 598065 229000)) nil (26164 14702 686394 0) 0 nil])
([nil nil ((905 . 906) (t 26164 14702 697731 345000)) nil (26164 14772 1007 0) 0 nil])
([nil nil ((617 . 618) (t 26164 14772 11817 530000)) nil (26164 14795 207317 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 987) (undo-tree-id1210 . -1) (#("	let " 0 1 (fontified t) 1 4 (face bold fontified t) 4 5 (fontified t)) . 987) (undo-tree-id1211 . -5) (undo-tree-id1212 . -5) (#("-" 0 1 (fontified t)) . -992) (undo-tree-id1213 . -1) (#("s" 0 1 (fontified t)) . -993) (undo-tree-id1214 . -1) (#(" " 0 1 (fontified t)) . -994) (undo-tree-id1215 . -1) (#("=" 0 1 (fontified t)) . -995) (undo-tree-id1216 . -1) (#(" " 0 1 (fontified t)) . -996) (undo-tree-id1217 . -1) 997 (988 . 997) (987 . 988) (987 . 988) 988 (t 26164 14795 875224 933000)) nil (26164 14887 962789 0) 0 nil] [nil nil ((802 . 803) (t 26164 14777 505185 102000)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 802)) (26164 14794 786162 0) 0 nil])
([nil nil ((995 . 1001) (988 . 995) (987 . 988) (987 . 988) 988 (t 26164 14887 973983 103000)) nil (26164 14897 58149 0) 0 nil])
([nil nil ((880 . 881) (t 26164 14788 746217 335000)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 880) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (t 26164 14792 289671 974000)) (26164 14792 279081 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1031) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (t 26164 14897 68963 765000)) nil (26164 14900 536317 0) 0 nil])
nil
([nil nil ((#("	let _s = _s0;" 0 1 (fontified t) 1 4 (face bold fontified t) 4 5 (fontified t) 5 7 (face font-lock-variable-name-face fontified t) 7 14 (fontified t)) . 987) (undo-tree-id1225 . -13) (undo-tree-id1226 . -13) (undo-tree-id1227 . -13) (undo-tree-id1228 . -13) (undo-tree-id1229 . -13) (undo-tree-id1230 . -13) (undo-tree-id1231 . -13) (undo-tree-id1232 . -13) (undo-tree-id1233 . -13) (undo-tree-id1234 . -12) (undo-tree-id1235 . -13) (undo-tree-id1236 . -12) (undo-tree-id1237 . -12) (undo-tree-id1238 . -12) (undo-tree-id1239 . -12) (undo-tree-id1240 . -12) (undo-tree-id1241 . -14) (t 26164 14900 546946 761000)) nil (26164 14913 429765 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 987) (undo-tree-id1223 . 1) (undo-tree-id1224 . -1)) nil (26164 14913 429748 0) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-variable-name-face fontified t)) . 960) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (t 26164 14913 441166 395000)) nil (26164 14919 464394 0) 0 nil])
([nil nil ((1013 . 1014) (t 26164 14915 246891 783000)) nil (26164 14952 393947 0) 0 nil] [nil nil ((#("s" 0 1 (fontified t)) . 1014) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (t 26164 14915 246891 783000)) ((1014 . 1015)) (26164 14919 463695 0) 0 nil])
([nil nil ((802 . 803) (t 26164 14952 405141 658000)) nil (26164 14956 536090 0) 0 nil])
nil
([nil nil ((880 . 881) (t 26164 14956 548224 931000)) nil (26164 14965 393672 0) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 880) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (t 26164 14965 403480 56000)) nil (26164 14969 171823 0) 0 nil])
([nil nil ((880 . 881)) nil (26164 14969 171808 0) 0 nil])
([nil nil ((157 . 158) (t 26164 14969 183089 865000)) nil (26164 14974 221158 0) 0 nil])
([nil nil ((1049 . 1062) (1045 . 1047) (1044 . 1046) (1043 . 1045) (#("\"" 0 1 (fontified nil)) . -1043) (1043 . 1044) (apply yas--snippet-revive 1034 1044 #s(yas--snippet nil nil #s(yas--exit 1043 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1043 nil) 28 nil nil nil nil)) (1034 . 1044) (#("println!($0)" 0 12 (fontified nil)) . 1034) (1034 . 1046) (#("print" 0 5 (fontified nil)) . 1034) (1034 . 1039) (#("println!(â€¦)" 0 11 (fontified nil)) . -1034) (1034 . 1045) (#("print" 0 5 (fontified t)) . -1034) (undo-tree-id1250 . -5) (undo-tree-id1251 . -5) (undo-tree-id1252 . -5) 1039 (1034 . 1039) (1032 . 1034) (t 26164 14974 232867 448000) 998) nil (26164 15036 946268 0) 0 nil])
([nil nil ((1063 . 1064) (t 26164 15036 955937 60000)) nil (26164 15037 937208 0) 0 nil])
([nil nil ((9 . 14) (1 . 10) (1 . 2) 9 (t 26164 15037 947021 136000)) nil (26164 15047 687578 0) 0 nil])
([nil nil ((16 . 17) (#("]" 0 1 (fontified nil)) . -16) (16 . 17) (#("]" 0 1 (fontified t)) . 2) (1 . 3) (t 26164 15047 696926 931000)) nil (26164 15051 32160 0) 0 nil])
([nil nil ((1 . 18) 16 (t 26164 15051 41812 522000)) nil (26164 15222 798770 0) 0 nil])
([nil nil ((#("[#derive(Debug)]" 0 1 (fontified t) 1 8 (fontified t) 8 9 (fontified t) 9 14 (face font-lock-type-face fontified t) 14 15 (fontified t) 15 16 (fontified t)) . 18) (undo-tree-id1255 . -15) (undo-tree-id1256 . -15) (undo-tree-id1257 . 2) (undo-tree-id1258 . -15) (undo-tree-id1259 . -15) (undo-tree-id1260 . -15) (undo-tree-id1261 . -15) (undo-tree-id1262 . -15) (undo-tree-id1263 . -15) (undo-tree-id1264 . -15) (undo-tree-id1265 . -15) (undo-tree-id1266 . -15) (undo-tree-id1267 . -15) (undo-tree-id1268 . -15) (undo-tree-id1269 . -15) (undo-tree-id1270 . -15) (undo-tree-id1271 . -15) (undo-tree-id1272 . -15) (undo-tree-id1273 . -15) (undo-tree-id1274 . -15) (undo-tree-id1275 . -15) (undo-tree-id1276 . -15) (undo-tree-id1277 . -15) (undo-tree-id1278 . -15) (undo-tree-id1279 . -15) (undo-tree-id1280 . -15) (undo-tree-id1281 . -15) (undo-tree-id1282 . -15) (undo-tree-id1283 . -15) (undo-tree-id1284 . -15) (undo-tree-id1285 . -15) (undo-tree-id1286 . -15) (undo-tree-id1287 . -15) (undo-tree-id1288 . -15) (undo-tree-id1289 . -15) (undo-tree-id1290 . -15) (undo-tree-id1291 . -15) (undo-tree-id1292 . -15) (undo-tree-id1293 . -15) (undo-tree-id1294 . -16)) nil (26164 15222 798952 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18) (undo-tree-id1295 . 1) (undo-tree-id1296 . 1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (t 26164 15223 269325 354000)) nil (26164 15224 37145 0) 0 nil] [nil nil ((#("enum AP {" 0 4 (face bold fontified t) 4 5 (fontified t) 5 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 9 (fontified t)) . 19) (undo-tree-id1253 . 9) (undo-tree-id1254 . -9)) ((19 . 28)) (26164 15222 798731 0) 0 nil])
([nil nil ((52 . 69) (t 26164 15224 46818 505000)) nil (26164 15227 527027 0) 0 nil])
nil
([nil nil ((110 . 127) (t 26164 15227 537191 634000)) nil (26164 15229 824595 0) 0 nil])
([nil nil ((158 . 175) (t 26164 15229 835442 967000)) nil (26164 15231 334922 0) 0 nil])
([nil nil ((1124 . 1126) (1121 . 1125) (1118 . 1120) (1116 . 1119) (t 26164 15231 345203 626000)) nil (26164 15245 359832 0) 0 nil])
([nil nil ((1097 . 1098) (#("A" 0 1 (face font-lock-type-face fontified t)) . 1097) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (t 26164 15245 369964 761000)) nil (26164 15301 517814 0) 0 nil])
([nil nil ((1057 . 1063) (1050 . 1057) (#("loop" 0 4 (face bold fontified t)) . 1050) (undo-tree-id1311 . -3) (undo-tree-id1312 . -4) (undo-tree-id1313 . -4) (undo-tree-id1314 . -3) (undo-tree-id1315 . -4) (undo-tree-id1316 . -2) (undo-tree-id1317 . -3) (undo-tree-id1318 . -2) (undo-tree-id1319 . -1) (undo-tree-id1320 . -2) (undo-tree-id1321 . -1) (undo-tree-id1322 . -4) (undo-tree-id1323 . -4) (t 26164 15301 528007 22000)) nil (26164 15313 545072 0) 0 nil])
([nil nil ((1066 . 1074) (#("	" 0 1 (fontified t)) . 1066) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (1110 . 1118) (#("	" 0 1 (fontified t)) . 1110) 1062 (t 26164 15313 555131 936000)) nil (26164 15314 571544 0) 0 nil])
([nil nil ((1062 . 1063) (#("3" 0 1 (fontified t)) . 1062) (undo-tree-id1338 . -1) (t 26164 15314 581888 760000)) nil (26164 15373 444340 0) 0 nil])
([nil nil ((1062 . 1063) (#("1" 0 1 (fontified t)) . 1062) (undo-tree-id1339 . -1) (t 26164 15373 467623 122000)) nil (26164 15380 990819 0) 0 nil])
([nil nil ((1030 . 1033) (1029 . 1030) (t 26164 15381 889 453000)) nil (26164 15394 440624 0) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1121) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) 1122 (1120 . 1122) (t 26164 15394 450807 545000) 1081) nil (26164 15400 55919 0) 0 nil])
([nil nil ((1085 . 1086)) nil (26164 15400 55904 0) 0 nil])
([nil nil ((1127 . 1131) (1123 . 1127) (1122 . 1123) (t 26164 15400 66311 573000)) nil (26164 15405 742322 0) 0 nil])
([nil nil ((1170 . 1171) (t 26164 15405 752880 119000)) nil (26164 15418 327499 0) 0 nil])
([nil nil ((1128 . 1129) (t 26164 15418 337705 37000)) nil (26164 15422 130805 0) 0 nil])
([nil nil ((#("	_s = _s1;
" 0 10 (fontified t) 10 11 (fontified t)) . 1122) (undo-tree-id1349 . 4) (undo-tree-id1350 . -10) (undo-tree-id1351 . -6) (undo-tree-id1352 . -6) (undo-tree-id1353 . -7) (undo-tree-id1354 . -6) (undo-tree-id1355 . -6) (undo-tree-id1356 . -6) (undo-tree-id1357 . -6) (undo-tree-id1358 . -6) (undo-tree-id1359 . -6) (undo-tree-id1360 . -6) (undo-tree-id1361 . -6) (undo-tree-id1362 . -6) (undo-tree-id1363 . -6) (undo-tree-id1364 . -6) (undo-tree-id1365 . -6) (undo-tree-id1366 . -6) (undo-tree-id1367 . -6) (undo-tree-id1368 . -6) (undo-tree-id1369 . -6) (undo-tree-id1370 . -6) (undo-tree-id1371 . -11) 1128 (t 26164 15422 141133 603000)) nil (26164 15429 570815 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1173 . 1174) (#("
" 0 1 (fontified nil)) . -1183) (1172 . 1184) 1135) nil (26164 15429 570789 0) 0 nil])
([nil nil ((1158 . 1159) (t 26164 15429 581110 352000)) nil (26164 15432 857121 0) 0 nil])
([nil nil ((1208 . 1220) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1208) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) 1209 (1204 . 1209) (1183 . 1204) (apply yas--snippet-revive 1175 1183 #s(yas--snippet nil nil #s(yas--exit 1183 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1183 nil) 29 nil nil nil nil)) (1175 . 1183) (#("x" 0 1 (fontified t)) . 1175) (undo-tree-id1377 . -1) 1176 (1175 . 1176) (1173 . 1175) (t 26164 15432 867511 475000) 1158) nil (26164 15455 536882 0) 0 nil])
([nil nil ((1066 . 1067) (#("2" 0 1 (fontified t)) . 1066) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (t 26164 15455 547199 588000)) nil (26164 15460 291307 0) 0 nil])
([nil nil ((1071 . 1074) (1070 . 1071) (1070 . 1071) 1086 (t 26164 15460 301885 139000)) nil (26164 15464 309363 0) 0 nil])
([nil nil ((1058 . 1059) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 1058) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1)) nil (26164 15464 309360 0) 0 nil])
([nil nil ((1074 . 1080) (t 26164 15464 321002 84000)) nil (26164 15466 651987 0) 0 nil])
([nil nil ((1080 . 1082) (t 26164 15466 662406 456000)) nil (26164 15469 496654 0) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 1081) (undo-tree-id1385 . 1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1)) nil (26164 15469 496992 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1135) (undo-tree-id1409 . -4) (undo-tree-id1410 . -4) (undo-tree-id1411 . -4) (undo-tree-id1412 . -4) (undo-tree-id1413 . -4) (undo-tree-id1414 . -4) (undo-tree-id1415 . -4) (undo-tree-id1416 . -4) (undo-tree-id1417 . -4) (1139 . 1140) (#("}" 0 1 (fontified nil)) . -1139) (1139 . 1140) (1133 . 1139) 1099) nil (26164 15475 493035 0) 0 nil] [nil nil ((nil rear-nonsticky nil 1100 . 1101) (nil fontified nil 1100 . 1101) (1100 . 1101) 1099) ((#("}" 0 1 (rear-nonsticky nil fontified nil)) . 1100) (nil rear-nonsticky t 1100 . 1101)) (26164 15469 496639 0) 0 nil])
([nil nil ((1070 . 1078) (#("	" 0 1 (fontified t)) . 1070) (1080 . 1081) (1082 . 1083) (1090 . 1093) (1134 . 1142) (#("	" 0 1 (fontified t)) . 1134) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (1189 . 1197) (#("	" 0 1 (fontified t)) . 1189) (1236 . 1244) (#("	" 0 1 (fontified t rear-nonsticky t)) . 1236) 1135) nil (26164 15475 493023 0) 0 nil])
nil
([nil nil ((#("        println!(\"{:?} {:?}, {:?}\", &_s1, _o, _ap);
" 0 8 (fontified t) 8 16 (face rust-builtin-formatting-macro fontified t) 16 17 (fontified t) 17 18 (face font-lock-string-face fontified t) 18 22 (face rust-string-interpolation fontified t) 22 23 (face font-lock-string-face fontified t) 23 27 (face rust-string-interpolation fontified t) 27 29 (face font-lock-string-face fontified t) 29 33 (face rust-string-interpolation fontified t) 33 34 (face font-lock-string-face fontified t) 34 36 (fontified t) 36 37 (face rust-ampersand-face fontified t) 37 49 (fontified t) 49 51 (fontified t) 51 52 (fontified t)) . 1156) (undo-tree-id1418 . -40) (undo-tree-id1419 . -51) (undo-tree-id1420 . -50) (undo-tree-id1421 . -50) (undo-tree-id1422 . -31) (undo-tree-id1423 . -31) (undo-tree-id1424 . -31) (undo-tree-id1425 . -31) (undo-tree-id1426 . -31) (undo-tree-id1427 . -31) (undo-tree-id1428 . -31) (undo-tree-id1429 . -31) (undo-tree-id1430 . -31) (undo-tree-id1431 . -31) (undo-tree-id1432 . -31) (undo-tree-id1433 . -31) (undo-tree-id1434 . 12) (undo-tree-id1435 . -36) (undo-tree-id1436 . -52) (t 26164 15475 503484 147000)) nil (26164 15479 721172 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1153 . 1154) (1146 . 1198)) nil (26164 15479 721148 0) 0 nil])
([nil nil ((1154 . 1158) (t 26164 15479 731880 779000)) nil (26164 15480 868601 0) 0 nil])
([nil nil ((#("        _s = _s1;
" 0 8 (fontified t) 8 17 (fontified t) 17 18 (fontified t)) . 1266) (undo-tree-id1437 . -17) (undo-tree-id1438 . -8) (undo-tree-id1439 . -8) (undo-tree-id1440 . -8) (undo-tree-id1441 . -8) (undo-tree-id1442 . -8) (undo-tree-id1443 . -18) 1274 (t 26164 15480 878994 487000)) nil (26164 15483 544629 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1209 . 1210) (1202 . 1220) 1206) nil (26164 15483 544618 0) 0 nil])
([nil nil ((1210 . 1214)) nil (26164 15483 544614 0) 0 nil])
([nil nil ((1233 . 1244) (t 26164 15483 555514 417000)) nil (26164 15490 969056 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -1242) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#(")" 0 1 (fontified t)) . 1243) (undo-tree-id1448 . 1)) nil (26164 15490 969055 0) 0 nil])
([nil nil ((1242 . 1250)) nil (26164 15490 969045 0) 0 nil])
([nil nil ((1250 . 1255) (1251 . 1252) (#("	    " 0 5 (fontified nil)) . 1250) (1250 . 1255) (1249 . 1251)) nil (26164 15490 969042 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1261 . 1262) (1250 . 1384) 1254 (t 26164 15490 979717 41000)) nil (26164 15494 667563 0) 0 nil])
([nil nil ((#("	    
" 0 6 (fontified t)) . 1384) (undo-tree-id1449 . -4) (undo-tree-id1450 . 1) (undo-tree-id1451 . -4) (undo-tree-id1452 . -4) (undo-tree-id1453 . -4) (undo-tree-id1454 . -4) (undo-tree-id1455 . -4) (undo-tree-id1456 . -6) (t 26164 15494 678213 182000)) nil (26164 15495 885349 0) 0 nil])
([nil nil ((1302 . 1303) (#("B" 0 1 (face font-lock-type-face fontified t)) . 1302) (undo-tree-id1457 . -1) (t 26164 15495 895875 408000)) nil (26164 15498 728300 0) 0 nil])
([nil nil ((1386 . 1394) (t 26164 15498 739155 223000)) nil (26164 15502 186646 0) 0 nil])
([nil nil ((1394 . 1399) (1395 . 1396) (#("	    " 0 5 (fontified nil)) . 1394) (1394 . 1399) (1393 . 1395)) nil (26164 15502 186642 0) 0 nil])
([nil nil ((1248 . 1249) (1384 . 1392) (#("	" 0 1 (fontified t)) . 1384) (undo-tree-id1459 . 1) (#("	  " 0 3 (fontified t)) . 1394) (#("  " 0 2 (fontified t)) . 1409) (#("
" 0 1 (rear-nonsticky t fontified t)) . 1532) (undo-tree-id1460 . -1) (1534 . 1542) (#("	" 0 1 (fontified t)) . 1534) 1533 (nil rear-nonsticky nil 1532 . 1533) (nil fontified nil 1399 . 1533) (1399 . 1533) (t 26164 15502 197503 759000)) nil (26164 15511 512471 0) 0 nil])
([nil nil ((1454 . 1455) (#("B" 0 1 (face font-lock-type-face fontified t)) . 1454) (undo-tree-id1458 . -1)) nil (26164 15511 512463 0) 0 nil])
([nil nil ((1062 . 1079) (apply yas--snippet-revive 1054 1062 #s(yas--snippet nil nil #s(yas--exit 1062 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1062 nil) 30 nil nil nil nil)) (1054 . 1062) (#("x" 0 1 (fontified t)) . 1054) (undo-tree-id1461 . -1) 1055 (1054 . 1055) (1050 . 1054) (1050 . 1051) 1068 (t 26164 15511 523092 813000)) nil (26164 15525 266060 0) 0 nil])
([nil nil ((#("        // XXX: The next state we get move from there" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 53 (face font-lock-comment-face fontified t)) . 1576) (undo-tree-id1463 . -28) (undo-tree-id1464 . -28) (undo-tree-id1465 . -53) (t 26164 15525 276828 672000)) nil (26164 15528 770381 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1576) (undo-tree-id1462 . -1)) nil (26164 15563 808241 0) 0 nil])
([nil nil ((1080 . 1084) (1080 . 1081) 1090 (t 26164 15565 968037 29000)) nil (26164 15623 46223 0) 0 nil] [nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 1159) (undo-tree-id1467 . -1) (undo-tree-id1469 . -1) (t 26164 15528 781353 542000)) ((1159 . 1160)) (26164 15563 268521 0) 0 nil])
([nil nil ((1084 . 1089)) nil (26164 15623 46222 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 871) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (t 26164 15551 202314 350000)) ((871 . 872) (t 26164 15556 692873 673000)) (26164 15556 681925 0) 0 nil] [nil nil ((#(":" 0 1 (fontified t)) . 869) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (t 26164 15551 202314 350000)) ((869 . 870)) (26164 15555 713220 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1084 1094 #s(yas--snippet nil nil #s(yas--exit 1093 nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1093 nil) 31 nil nil nil nil)) (1084 . 1094) (#("println!($0)" 0 12 (fontified nil)) . 1084) (1084 . 1096) (#("print" 0 5 (fontified nil)) . 1084) (1084 . 1089) (#("println!(â€¦)" 0 11 (fontified nil)) . -1084) (1084 . 1095) (#("print" 0 5 (fontified t)) . -1084) (undo-tree-id1477 . -5) (undo-tree-id1478 . -5) (undo-tree-id1479 . -5) 1089) nil (26164 15623 46220 0) 0 nil])
nil
nil
([nil nil ((1094 . 1095) (1093 . 1095) (#("\"" 0 1 (fontified nil)) . -1093) (1093 . 1094)) nil (26164 15623 46214 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-string-face fontified t)) . -1094) (undo-tree-id1476 . -1) 1095) nil (26164 15623 46212 0) 0 nil])
([nil nil ((1095 . 1098) (1094 . 1096)) nil (26164 15623 46210 0) 0 nil])
([nil nil ((#(" " 0 1 (face rust-string-interpolation fontified t)) . -1097) (undo-tree-id1475 . -1) 1098) nil (26164 15623 46209 0) 0 nil])
([nil nil ((1100 . 1102) (1098 . 1101)) nil (26164 15623 46907 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1114) (undo-tree-id1485 . -1) (#(" " 0 1 (fontified t)) . -1115) (undo-tree-id1486 . -1) 1116 (#("N" 0 1 (face font-lock-type-face fontified t)) . -1116) (undo-tree-id1487 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -1117) (undo-tree-id1488 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1118) (undo-tree-id1489 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1119) (undo-tree-id1490 . -1) (#("," 0 1 (fontified t)) . -1120) (undo-tree-id1491 . -1) (#(" " 0 1 (fontified t)) . -1121) (undo-tree-id1492 . -1) 1122 (1114 . 1122) (1111 . 1114) (#("*" 0 1 (fontified t)) . -1111) (undo-tree-id1493 . -1) 1112 (1109 . 1112) (1105 . 1107) (1103 . 1106)) nil (26164 15641 853809 0) 0 nil] [nil nil ((1106 . 1107) (1105 . 1107) (#("\"" 0 1 (face rust-string-interpolation fontified nil)) . -1105) (1105 . 1106) (1103 . 1106)) ((#(" {}" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil) 2 3 (face font-lock-string-face fontified nil)) . 1103) (undo-tree-id1480 . -3) (undo-tree-id1481 . -3) (undo-tree-id1482 . -2) (undo-tree-id1483 . -3) (#("\"" 0 1 (face rust-string-interpolation fontified nil)) . 1105) (1105 . 1106) (#("\"\"" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 1105) (undo-tree-id1484 . -2) (#("?" 0 1 (face rust-question-mark fontified t)) . 1106)) (26164 15623 46199 0) 0 nil])
([nil nil ((#("{:?}" 0 4 (face rust-string-interpolation fontified t)) . 1099) (undo-tree-id1561 . -4) (undo-tree-id1562 . -4) (undo-tree-id1563 . -3) (undo-tree-id1564 . -4) (undo-tree-id1565 . -2) (undo-tree-id1566 . -3) (undo-tree-id1567 . -2) (undo-tree-id1568 . -1) (undo-tree-id1569 . -2) (undo-tree-id1570 . -1) (undo-tree-id1571 . -4) (t 26164 15641 865277 741000)) nil (26164 15645 661613 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 1099) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1)) nil (26164 15645 661603 0) 0 nil])
([nil nil ((#("{:?}" 0 4 (face rust-string-interpolation fontified t)) . 1099) (undo-tree-id1545 . 1) (undo-tree-id1546 . -4) (undo-tree-id1547 . -3) (undo-tree-id1548 . -4) (undo-tree-id1549 . -3) (undo-tree-id1550 . -2) (undo-tree-id1551 . -3) (undo-tree-id1552 . -1) (undo-tree-id1553 . -2) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -4)) nil (26164 15645 661598 0) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 1098) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1)) nil (26164 15645 661582 0) 0 nil])
([nil nil ((1105 . 1106) (t 26164 15645 673684 502000)) nil (26164 15646 935567 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1111 1123 #s(yas--snippet nil (#s(yas--field 1 1118 1122 nil nil nil t #s(yas--exit 1123 nil))) #s(yas--exit 1123 nil) 32 nil #s(yas--field 1 1118 1122 nil nil nil t #s(yas--exit 1123 nil)) nil nil)) (1120 . 1122) (1119 . 1120) (#("s" 0 1 (fontified nil)) . 1119) (undo-tree-id1572 . -1) (1118 . 1119) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1118 1122 nil nil nil t #s(yas--exit 1123 nil))) #s(yas--exit 1123 nil) 32 nil #s(yas--field 1 1118 1122 nil nil nil t #s(yas--exit 1123 nil)) nil nil)) (1111 . 1120) (#("_label(${1:s})$0" 0 16 (fontified nil)) . 1111) (1111 . 1127) (#("_lab" 0 4 (fontified nil)) . 1111) (1111 . 1115) (#("_label(â€¦)" 0 9 (fontified nil)) . -1111) (1111 . 1120) (#("_lab" 0 4 (fontified t)) . -1111) (undo-tree-id1573 . -4) 1115 (1109 . 1115) (1100 . 1102) (1098 . 1101) (t 26164 15646 947321 37000)) nil (26164 15674 794949 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1121) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (t 26164 15674 808049 179000)) nil (26164 15683 441569 0) 0 nil])
([nil nil ((772 . 773) (#("Q" 0 1 (face font-lock-type-face fontified t)) . 772) (undo-tree-id1579 . -1) (t 26164 15683 453758 728000)) nil (26164 15748 19205 0) 0 nil])
([nil nil ((801 . 802) (#("R" 0 1 (face font-lock-type-face fontified t)) . 801) (undo-tree-id1578 . -1)) nil (26164 15748 19201 0) 0 nil])
([nil current ((1100 . 1102) (1079 . 1100) (t 26164 15748 31708 495000)) nil (26164 15770 894 0) 0 nil])
nil
